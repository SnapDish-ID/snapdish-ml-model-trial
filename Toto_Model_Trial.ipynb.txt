{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# **Load Dataset**"
      ],
      "metadata": {
        "id": "FYQJkMGN6xFM"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eV1ONcXvs3OT",
        "outputId": "e21ae6f1-c62f-41c1-b7ba-d1977be81bea",
        "collapsed": true
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2024-11-24 07:48:52--  https://drive.google.com/uc?export=download&id=1XxuP8A3hKf2Nt6dtPny-j9w_cmcyRTSZ\n",
            "Resolving drive.google.com (drive.google.com)... 172.253.115.100, 172.253.115.139, 172.253.115.102, ...\n",
            "Connecting to drive.google.com (drive.google.com)|172.253.115.100|:443... connected.\n",
            "HTTP request sent, awaiting response... 303 See Other\n",
            "Location: https://drive.usercontent.google.com/download?id=1XxuP8A3hKf2Nt6dtPny-j9w_cmcyRTSZ&export=download [following]\n",
            "--2024-11-24 07:48:52--  https://drive.usercontent.google.com/download?id=1XxuP8A3hKf2Nt6dtPny-j9w_cmcyRTSZ&export=download\n",
            "Resolving drive.usercontent.google.com (drive.usercontent.google.com)... 142.251.179.132, 2607:f8b0:4004:c1f::84\n",
            "Connecting to drive.usercontent.google.com (drive.usercontent.google.com)|142.251.179.132|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 10092111 (9.6M) [application/octet-stream]\n",
            "Saving to: ‘dataset.zip’\n",
            "\n",
            "dataset.zip         100%[===================>]   9.62M  20.6MB/s    in 0.5s    \n",
            "\n",
            "2024-11-24 07:48:57 (20.6 MB/s) - ‘dataset.zip’ saved [10092111/10092111]\n",
            "\n",
            "Archive:  dataset.zip\n",
            "  inflating: dataset/Waluh/waluh4.jpg  \n",
            "  inflating: dataset/Cabai Merah/Screenshot 2024-11-20 094752.png  \n",
            "  inflating: dataset/Cabai Merah/Screenshot 2024-11-20 093848.png  \n",
            "  inflating: dataset/Waluh/waluh9.jpg  \n",
            "  inflating: dataset/Waluh/waluh3.jpg  \n",
            "  inflating: dataset/Waluh/waluh5.jpg  \n",
            "  inflating: dataset/Cabai Merah/Screenshot 2024-11-20 094911.png  \n",
            "  inflating: dataset/Cabai Merah/Screenshot 2024-11-20 093815.png  \n",
            "  inflating: dataset/Waluh/waluh13.jpg  \n",
            "  inflating: dataset/Waluh/waluh2.jpg  \n",
            "  inflating: dataset/Cabai Merah/Screenshot 2024-11-20 093921.png  \n",
            "  inflating: dataset/Waluh/waluh14.jpg  \n",
            "  inflating: dataset/Waluh/waluh7.jpg  \n",
            "  inflating: dataset/Waluh/waluh12.jpg  \n",
            "  inflating: dataset/Waluh/waluh11.jpg  \n",
            "  inflating: dataset/Cabai Merah/Screenshot 2024-11-20 093908.png  \n",
            "  inflating: dataset/Waluh/waluh15.jpg  \n",
            "  inflating: dataset/Waluh/waluh8.jpg  \n",
            "  inflating: dataset/Waluh/waluh6.jpg  \n",
            "  inflating: dataset/Cabai Merah/Screenshot 2024-11-20 093831.png  \n",
            "  inflating: dataset/Cabai Merah/Screenshot 2024-11-20 094147.png  \n",
            "  inflating: dataset/Cabai Merah/Screenshot 2024-11-20 094439.png  \n",
            "  inflating: dataset/Cabai Merah/Screenshot 2024-11-20 094045.png  \n",
            "  inflating: dataset/Cabai Hijau/Screenshot 2024-11-20 102530.png  \n",
            "  inflating: dataset/Cabai Merah/Screenshot 2024-11-20 094246.png  \n",
            "  inflating: dataset/Waluh/waluh10.jpg  \n",
            "  inflating: dataset/Cabai Merah/Screenshot 2024-11-20 093757.png  \n",
            "  inflating: dataset/Ayam/Screenshot 2024-11-20 194845.png  \n",
            "  inflating: dataset/Cabai Hijau/Screenshot 2024-11-20 095616.png  \n",
            "  inflating: dataset/Waluh/waluh1.jpg  \n",
            "  inflating: dataset/Cabai Merah/Screenshot 2024-11-20 094539.png  \n",
            "  inflating: dataset/Cabai Merah/Screenshot 2024-11-20 093746.png  \n",
            "  inflating: dataset/Ayam/Screenshot 2024-11-20 170329.png  \n",
            "  inflating: dataset/Cabai Hijau/Screenshot 2024-11-20 102715.png  \n",
            "  inflating: dataset/Cabai Merah/Screenshot 2024-11-20 093729.png  \n",
            "  inflating: dataset/Ayam/Screenshot 2024-11-20 194859.png  \n",
            "  inflating: dataset/Ayam/Screenshot 2024-11-20 170758.png  \n",
            "  inflating: dataset/Ayam/Screenshot 2024-11-20 170224.png  \n",
            "  inflating: dataset/Ayam/Screenshot 2024-11-20 170249.png  \n",
            "  inflating: dataset/Cabai Hijau/Screenshot 2024-11-20 101105.png  \n",
            "  inflating: dataset/Cabai Hijau/Screenshot 2024-11-20 101021.png  \n",
            "  inflating: dataset/Cabai Hijau/Screenshot 2024-11-20 095532.png  \n",
            "  inflating: dataset/Ayam/Screenshot 2024-11-20 170256.png  \n",
            "  inflating: dataset/Cabai Hijau/Screenshot 2024-11-20 101656.png  \n",
            "  inflating: dataset/Cabai Hijau/Screenshot 2024-11-20 101241.png  \n",
            "  inflating: dataset/Cabai Hijau/Screenshot 2024-11-20 101302.png  \n",
            "  inflating: dataset/Ayam/Screenshot 2024-11-20 170829.png  \n",
            "  inflating: dataset/Ayam/Screenshot 2024-11-20 170407.png  \n",
            "  inflating: dataset/Cabai Hijau/Screenshot 2024-11-20 102255.png  \n",
            "  inflating: dataset/Cabai Hijau/Screenshot 2024-11-20 101748.png  \n",
            "  inflating: dataset/Cabai Hijau/Screenshot 2024-11-20 101228.png  \n",
            "  inflating: dataset/Cabai Hijau/Screenshot 2024-11-20 101007.png  \n",
            "  inflating: dataset/Ayam/Screenshot 2024-11-20 170807.png  \n",
            "  inflating: dataset/Ayam/Screenshot 2024-11-20 170344.png  \n",
            "  inflating: dataset/Sosis/sosis8.jpg  \n",
            "  inflating: dataset/Sosis/sosis6.jpg  \n",
            "  inflating: dataset/Sosis/sosis9.jpg  \n",
            "  inflating: dataset/Ayam/Screenshot 2024-11-20 170208.png  \n",
            "  inflating: dataset/Ayam/Screenshot 2024-11-20 170305.png  \n",
            "  inflating: dataset/Ayam/Screenshot 2024-11-20 195047.png  \n",
            "  inflating: dataset/Cabai Hijau/Screenshot 2024-11-20 100955.png  \n",
            "  inflating: dataset/Sosis/sosis14.jpg  \n",
            "  inflating: dataset/Ayam/Screenshot 2024-11-20 194938.png  \n",
            "  inflating: dataset/Sosis/sosis7.jpg  \n",
            "  inflating: dataset/Sosis/sosis5.jpg  \n",
            "  inflating: dataset/Sosis/sosis1.jpg  \n",
            "  inflating: dataset/Sosis/sosis4.jpg  \n",
            "  inflating: dataset/Sosis/sosis2.jpg  \n",
            "  inflating: dataset/Bakso/bakso14.jpg  \n",
            "  inflating: dataset/Sosis/sosis15.jpg  \n",
            "  inflating: dataset/Bakso/bakso13.jpg  \n",
            "  inflating: dataset/Bakso/bakso11.jpg  \n",
            "  inflating: dataset/Cabai Hijau/Screenshot 2024-11-20 101642.png  \n",
            "  inflating: dataset/Sosis/sosis3.jpg  \n",
            "  inflating: dataset/Sosis/sosis10.jpg  \n",
            "  inflating: dataset/Tahu/download (5).jpeg  \n",
            "  inflating: dataset/Sosis/sosis12.jpg  \n",
            "  inflating: dataset/Tahu/download (1).jpeg  \n",
            "  inflating: dataset/Bakso/bakso2.jpg  \n",
            "  inflating: dataset/Tahu/images (7).jpeg  \n",
            "  inflating: dataset/Tahu/download (2).jpeg  \n",
            "  inflating: dataset/Tahu/download (4).jpeg  \n",
            "  inflating: dataset/Bakso/bakso10.jpg  \n",
            "  inflating: dataset/Tahu/download (3).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/Screenshot 2024-11-20 095242.png  \n",
            "  inflating: dataset/Sosis/sosis11.jpg  \n",
            "  inflating: dataset/Sosis/sosis13.jpg  \n",
            "  inflating: dataset/Bakso/bakso4.jpg  \n",
            "  inflating: dataset/Tahu/download (7).jpeg  \n",
            "  inflating: dataset/Bakso/bakso5.jpg  \n",
            "  inflating: dataset/Bakso/bakso15.jpg  \n",
            "  inflating: dataset/Bakso/bakso1.jpg  \n",
            "  inflating: dataset/Tempe/download (8).jpeg  \n",
            "  inflating: dataset/Tahu/images (5).jpeg  \n",
            "  inflating: dataset/Bakso/bakso12.jpg  \n",
            "  inflating: dataset/Tahu/images (4).jpeg  \n",
            "  inflating: dataset/Tahu/download (1).webp  \n",
            "  inflating: dataset/Tempe/download (13).jpeg  \n",
            "  inflating: dataset/Tempe/download (9).jpeg  \n",
            "  inflating: dataset/Tahu/download.jpeg  \n",
            "  inflating: dataset/Tahu/images (2).jpeg  \n",
            "  inflating: dataset/Bakso/bakso9.jpg  \n",
            "  inflating: dataset/Tempe/images (12).jpeg  \n",
            "  inflating: dataset/Bakso/bakso3.jpg  \n",
            "  inflating: dataset/Bakso/bakso7.jpg  \n",
            "  inflating: dataset/Bakso/bakso8.jpg  \n",
            "  inflating: dataset/Tempe/images (14).jpeg  \n",
            "  inflating: dataset/Tempe/images (10).jpeg  \n",
            "  inflating: dataset/Tempe/images (8).jpeg  \n",
            "  inflating: dataset/Tempe/images (11).jpeg  \n",
            "  inflating: dataset/Tempe/images (15).jpeg  \n",
            "  inflating: dataset/Tempe/images (9).jpeg  \n",
            "  inflating: dataset/Tempe/download (11).jpeg  \n",
            "  inflating: dataset/Tempe/images (13).jpeg  \n",
            "  inflating: dataset/Bakso/bakso6.jpg  \n",
            "  inflating: dataset/Tahu/images (3).jpeg  \n",
            "  inflating: dataset/Tahu/download (6).jpeg  \n",
            "  inflating: dataset/Tempe/download (12).jpeg  \n",
            "  inflating: dataset/Tahu/images (6).jpeg  \n",
            "  inflating: dataset/Tempe/images (16).jpeg  \n",
            "  inflating: dataset/Tempe/download (10).jpeg  \n"
          ]
        }
      ],
      "source": [
        "# !wget --no-check-certificate \"https://drive.google.com/uc?export=download&id=1XxuP8A3hKf2Nt6dtPny-j9w_cmcyRTSZ\" -O dataset.zip\n",
        "# !unzip dataset.zip -d dataset"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!kaggle datasets download -d pradwitanasha/dataset-jpeg-trial-food-ingredients"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vbwuq5YOOINc",
        "outputId": "10edf73d-fc7c-4321-b95d-4e4e66774900"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset URL: https://www.kaggle.com/datasets/pradwitanasha/dataset-jpeg-trial-food-ingredients\n",
            "License(s): apache-2.0\n",
            "Downloading dataset-jpeg-trial-food-ingredients.zip to /content\n",
            " 81% 57.0M/70.2M [00:00<00:00, 146MB/s]\n",
            "100% 70.2M/70.2M [00:00<00:00, 151MB/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!unzip dataset-jpeg-trial-food-ingredients.zip -d dataset"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "RflqT-paPL4-",
        "outputId": "f237675a-d20c-4a38-da84-eedb0d2dcc45"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  dataset-jpeg-trial-food-ingredients.zip\n",
            "  inflating: dataset/Ayam/1136937_81968550-1b54-4908-a3e3-5ab4f1099926_1161_1161.jpeg  \n",
            "  inflating: dataset/Ayam/1167245_720.jpeg  \n",
            "  inflating: dataset/Ayam/18GPy1vDSG1Q.jpeg  \n",
            "  inflating: dataset/Ayam/201711281942253_b.jpeg  \n",
            "  inflating: dataset/Ayam/2022-01-08-jangan-pernah-cuci-ayam-mentah-sebelum-dimasak.jpeg  \n",
            "  inflating: dataset/Ayam/2690456462.jpeg  \n",
            "  inflating: dataset/Ayam/2884058488.jpeg  \n",
            "  inflating: dataset/Ayam/2e91101f90ada67e5c14dd9e210e9995.jpeg  \n",
            "  inflating: dataset/Ayam/31156333303-5-penyakit-yang-bisa-muncul-ketika-kita-makan-ayam-mentah-pzkgfdnpcu.jpeg  \n",
            "  inflating: dataset/Ayam/415e39c5-1927-42b5-ae6e-6134e4aa074e_169.jpeg  \n",
            "  inflating: dataset/Ayam/49761ab0-08b4-4b1c-92fb-9e33011c0664_169.jpeg  \n",
            "  inflating: dataset/Ayam/56e383c9-2316-46c4-929e-478a11d1b649.jpeg  \n",
            "  inflating: dataset/Ayam/57032bc6-f321-4e32-bb5a-219e54cdc6b1.jpeg  \n",
            "  inflating: dataset/Ayam/59905f4021cde763f60360f1bae5dea3-1024x723.jpeg  \n",
            "  inflating: dataset/Ayam/5d4932858115e-daging-ayam-mentah_1265_711.jpeg  \n",
            "  inflating: dataset/Ayam/62e5077b152a6jpg-20230801012424.jpeg  \n",
            "  inflating: dataset/Ayam/6329499bc24ff.jpeg  \n",
            "  inflating: dataset/Ayam/651f5dceee71djpg-20231119064824.jpeg  \n",
            "  inflating: dataset/Ayam/71995-ilustrasi-ayam-mentah-envato-elements-by-dream79.jpeg  \n",
            "  inflating: dataset/Ayam/752861303_3442a423-5cd0-409c-a3b5-3cb5e8926780_2048_2048.jpeg  \n",
            "  inflating: dataset/Ayam/8421997_a1fb9753-3fb6-4d15-b635-7293a90751f0_1125_1125.jpeg  \n",
            "  inflating: dataset/Ayam/9184_original_mencuci-ayam_20160327_105034.jpeg  \n",
            "  inflating: dataset/Ayam/Ayam-Mentah-4124531204.jpeg  \n",
            "  inflating: dataset/Ayam/Bahaya_Mencuci_Ayam_Potong_Mentah_.jpeg  \n",
            "  inflating: dataset/Ayam/Daging-ayam-Foto-Solid-Starts-P1673db6752920a4a.md.jpeg  \n",
            "  inflating: dataset/Ayam/Daging-ayam-dan-kebutuhan-pokok-lainnya-171058500.jpeg  \n",
            "  inflating: dataset/Ayam/Jangan-Mencuci-Daging-Ayam-Mentah--Beresiko-Fatal-untuk-Kesehatan-master-1853978032.jpeg  \n",
            "  inflating: dataset/Ayam/S3232d8a518ac4f96b66cbc286c64327bq.jpeg  \n",
            "  inflating: dataset/Ayam/SS.jpeg    \n",
            "  inflating: dataset/Ayam/Sebelum-Bahaya-Mengancam--Segera-Hentikan-Kebiasaan-Mencuci-Daging-Ayam-Mentah-master-1125725952.jpeg  \n",
            "  inflating: dataset/Ayam/WhatsApp-Image-2023-10-27-at-11.24.29.jpeg  \n",
            "  inflating: dataset/Ayam/appetite-1238525_1920.jpeg  \n",
            "  inflating: dataset/Ayam/ayam-1.jpeg  \n",
            "  inflating: dataset/Ayam/ayam-makanan-penambah-tinggi-badanfreepikcomtimolina.jpeg  \n",
            "  inflating: dataset/Ayam/ayam-mentah-1669344789151.jpeg  \n",
            "  inflating: dataset/Ayam/ayam-mentah-1669344822911.jpeg  \n",
            "  inflating: dataset/Ayam/ayam-mentah-1670335179085.jpeg  \n",
            "  inflating: dataset/Ayam/bakteri-salmonella-mengintai-hindari-konsumsi-ayam-mentah-atau-setengah-matang-sHRs6NzB9R.jpeg  \n",
            "  inflating: dataset/Ayam/berbahaya-jangan-cuci-daging-ayam-mentah.jpeg  \n",
            "  inflating: dataset/Ayam/brd-44261_kulit-ayam-mentah-bersih-segar-500-gram-freshmarketlampung_full01-f84dbc7f.jpeg  \n",
            "  inflating: dataset/Ayam/chicken-4761000_1280.jpeg  \n",
            "  inflating: dataset/Ayam/ciri-daging-ayam-tidak-layak-konsumsi-scaled.jpeg  \n",
            "  inflating: dataset/Ayam/d74ebe1a2404d3b782f9d9706618cea0.jpeg  \n",
            "  inflating: dataset/Ayam/daging-ayam-_170913174003-586.jpeg  \n",
            "  inflating: dataset/Ayam/daging-ayam-fillet-pixabay_169.jpeg  \n",
            "  inflating: dataset/Ayam/daging-ayam-mentah-1-e1625216138180.jpeg  \n",
            "  inflating: dataset/Ayam/daging-ayam-mentah-2-e1625216126633.jpeg  \n",
            "  inflating: dataset/Ayam/daging-ayam-mentah-e1709010199240.jpeg  \n",
            "  inflating: dataset/Ayam/daging-ayam-mentah.jpeg  \n",
            "  inflating: dataset/Ayam/daging-ayam-mentahfoto-freepikjcomp-1.jpeg  \n",
            "  inflating: dataset/Ayam/daging-ayam-yang-dijual-di-satu-kios-penjual-daging-ayam-di-pasar-tomang-barat.jpeg  \n",
            "  inflating: dataset/Ayam/daging-ayamjpg-20221118105820.jpeg  \n",
            "  inflating: dataset/Ayam/daging_ayam.jpeg  \n",
            "  inflating: dataset/Ayam/depositphotos_146161299-stock-photo-whole-raw-chicken.jpeg  \n",
            "  inflating: dataset/Ayam/depositphotos_38608453-stock-photo-raw-chicken-breast-fillets.jpeg  \n",
            "  inflating: dataset/Ayam/depositphotos_39791951-stock-photo-whole-raw-chicken.jpeg  \n",
            "  inflating: dataset/Ayam/download (1).jpeg  \n",
            "  inflating: dataset/Ayam/download (10).jpeg  \n",
            "  inflating: dataset/Ayam/download (11).jpeg  \n",
            "  inflating: dataset/Ayam/download (12).jpeg  \n",
            "  inflating: dataset/Ayam/download (13).jpeg  \n",
            "  inflating: dataset/Ayam/download (14).jpeg  \n",
            "  inflating: dataset/Ayam/download (15).jpeg  \n",
            "  inflating: dataset/Ayam/download (16).jpeg  \n",
            "  inflating: dataset/Ayam/download (17).jpeg  \n",
            "  inflating: dataset/Ayam/download (18).jpeg  \n",
            "  inflating: dataset/Ayam/download (19).jpeg  \n",
            "  inflating: dataset/Ayam/download (2).jpeg  \n",
            "  inflating: dataset/Ayam/download (20).jpeg  \n",
            "  inflating: dataset/Ayam/download (21).jpeg  \n",
            "  inflating: dataset/Ayam/download (3).jpeg  \n",
            "  inflating: dataset/Ayam/download (4).jpeg  \n",
            "  inflating: dataset/Ayam/download (5).jpeg  \n",
            "  inflating: dataset/Ayam/download (6).jpeg  \n",
            "  inflating: dataset/Ayam/download (7).jpeg  \n",
            "  inflating: dataset/Ayam/download (8).jpeg  \n",
            "  inflating: dataset/Ayam/download (9).jpeg  \n",
            "  inflating: dataset/Ayam/download.jpeg  \n",
            "  inflating: dataset/Ayam/jk-sloan-9zLa37VNL38-unsplash-1-998866310.jpeg  \n",
            "  inflating: dataset/Ayam/justbuy_usus_ayam_mentah_-frozen-_full01_rq9m2qzg.jpeg  \n",
            "  inflating: dataset/Ayam/makan-ayam-mentah.jpeg  \n",
            "  inflating: dataset/Ayam/meat-6054511_640.jpeg  \n",
            "  inflating: dataset/Ayam/no_brand_ayam_mentah_broiler_1_ekor_full04_hqmugjyn.jpeg  \n",
            "  inflating: dataset/Ayam/no_brand_usus_ayam_mentah_1_kg_fresh_full01_1100f1e2.jpeg  \n",
            "  inflating: dataset/Ayam/oQ5I3ISx81Pu.jpeg  \n",
            "  inflating: dataset/Ayam/paha-ayam-mentah-raw-chicken-260nw-2325283559.jpeg  \n",
            "  inflating: dataset/Ayam/pelanggan-dapat-ayam-mentah.jpeg  \n",
            "  inflating: dataset/Ayam/pexels-photo-5769376.jpeg  \n",
            "  inflating: dataset/Ayam/picsart-23-06-26-00-33-40-488-1758a0692afbc8274363a550b6365bae-7c2a244edc6b613b70542aaf3508322f_600x400.jpeg  \n",
            "  inflating: dataset/Ayam/pngtree-raw-chicken-chicken-legs-chicken-wings-fresh-png-image_6247994.jpeg  \n",
            "  inflating: dataset/Ayam/pngtree-raw-chicken-close-up-meal-chicken-breast-png-image_3226715.jpeg  \n",
            "  inflating: dataset/Ayam/proses-penyimpanan-ayam-di-kulkas-harus-dilakukan-dengan-baik_200508222619-106.jpeg  \n",
            "  inflating: dataset/Ayam/sfidn-penyakit-akibat-konsumsi-daging-ayam-mentah-873x585.jpeg  \n",
            "  inflating: dataset/Bakso/0_cc4c7cdf-c730-4876-83e2-2c460f00ddac_600_414.jpeg  \n",
            "  inflating: dataset/Bakso/1-11-1024x768.jpeg  \n",
            "  inflating: dataset/Bakso/1701396909.7483.jpeg  \n",
            "  inflating: dataset/Bakso/2-1081939863-Buka-Agen-Reseller-Supplier-Pentol-Bakso-Mentah-Kemasan-Yang-Enak.jpeg  \n",
            "  inflating: dataset/Bakso/270dbbd6-f46f-44e9-9d67-8cab55622b75.jpeg  \n",
            "  inflating: dataset/Bakso/35349634e7c906931476b98b85724b06.jpeg  \n",
            "  inflating: dataset/Bakso/3db04626-7785-4d47-8938-19f15a038f5c.jpeg  \n",
            "  inflating: dataset/Bakso/3e99cfd8346f322cb7e29be1950da153.jpeg  \n",
            "  inflating: dataset/Bakso/4419158_f8455a03-9756-44fa-8cb0-053a9babe1aa_796_796.jpeg  \n",
            "  inflating: dataset/Bakso/664xauto-buat-bakso-ayam-gurih-sendiri-simpel-banget-2208267.jpeg  \n",
            "  inflating: dataset/Bakso/71506c7b8c1c47b84a19204b37f659c2.jpeg  \n",
            "  inflating: dataset/Bakso/7198503_a3a3cbad-2809-4e97-aee0-4c373d1bc171_663_663.jpeg  \n",
            "  inflating: dataset/Bakso/8966400f0f483798d0617c931b3c4702.jpeg  \n",
            "  inflating: dataset/Bakso/9bce40dc-7651-4d2c-9013-c3b30aa2ccef.jpeg  \n",
            "  inflating: dataset/Bakso/9e753005-a693-4ede-9433-55705e2dc743.jpeg  \n",
            "  inflating: dataset/Bakso/Agen+Bakso+Sapi+1.jpeg  \n",
            "  inflating: dataset/Bakso/Bakso-Warisan-2.jpeg  \n",
            "  inflating: dataset/Bakso/Beef-meat-Ball.jpeg  \n",
            "  inflating: dataset/Bakso/KA82F32A1DC_brg21252.jpeg  \n",
            "  inflating: dataset/Bakso/KCCE83B62E7_brg18518.jpeg  \n",
            "  inflating: dataset/Bakso/S078ce663c8ad4faaad86dd1c4669e0b0C.jpeg  \n",
            "  inflating: dataset/Bakso/S90df3d80daee4b6bb33d34523a07c3812.jpeg  \n",
            "  inflating: dataset/Bakso/Sbe3a79384ab74cc2804948ec8a4c4302p.jpg_360x360q75.jpg_.jpeg  \n",
            "  inflating: dataset/Bakso/Sbe83443ac1434ee39ae82803b2531d96L.jpg_720x720q80.jpeg  \n",
            "  inflating: dataset/Bakso/agen-jual-bakso-sapi.jpeg  \n",
            "  inflating: dataset/Bakso/bakso-Sapi-1-1024x1024.jpeg  \n",
            "  inflating: dataset/Bakso/bakso-bulatjpg-20211216014802.jpeg  \n",
            "  inflating: dataset/Bakso/bakso-english-called-meatball-food-260nw-1831107637.jpeg  \n",
            "  inflating: dataset/Bakso/baso.jpeg  \n",
            "  inflating: dataset/Bakso/champion_champion_basreng_bakso_goreng_mentah_isi_25_butir_1kg_full02_ec223lst.jpeg  \n",
            "  inflating: dataset/Bakso/d1e124a1-2a1a-4a6e-bfda-6bc2f348ae6c.jpeg  \n",
            "  inflating: dataset/Bakso/data.jpeg  \n",
            "  inflating: dataset/Bakso/data.jpeg.jpeg  \n",
            "  inflating: dataset/Bakso/data.png.jpeg  \n",
            "  inflating: dataset/Bakso/depositphotos_113465200-stock-photo-rows-of-raw-homemade-meatballs.jpeg  \n",
            "  inflating: dataset/Bakso/depositphotos_140707754-stock-photo-raw-meatballs-with-pepper.jpeg  \n",
            "  inflating: dataset/Bakso/depositphotos_454285800-stock-photo-raw-home-made-italian-traditional.jpeg  \n",
            "  inflating: dataset/Bakso/download (1).jpeg  \n",
            "  inflating: dataset/Bakso/download (10).jpeg  \n",
            "  inflating: dataset/Bakso/download (11).jpeg  \n",
            "  inflating: dataset/Bakso/download (12).jpeg  \n",
            "  inflating: dataset/Bakso/download (13).jpeg  \n",
            "  inflating: dataset/Bakso/download (14).jpeg  \n",
            "  inflating: dataset/Bakso/download (15).jpeg  \n",
            "  inflating: dataset/Bakso/download (2).jpeg  \n",
            "  inflating: dataset/Bakso/download (3).jpeg  \n",
            "  inflating: dataset/Bakso/download (4).jpeg  \n",
            "  inflating: dataset/Bakso/download (5).jpeg  \n",
            "  inflating: dataset/Bakso/download (6).jpeg  \n",
            "  inflating: dataset/Bakso/download (7).jpeg  \n",
            "  inflating: dataset/Bakso/download (8).jpeg  \n",
            "  inflating: dataset/Bakso/download (9).jpeg  \n",
            "  inflating: dataset/Bakso/download.jpeg  \n",
            "  inflating: dataset/Bakso/e4345ff6-20e6-4665-9d72-d1244164ac38.jpeg  \n",
            "  inflating: dataset/Bakso/e6de8f0200e368699c0212f8a99a75ce.jpeg  \n",
            "  inflating: dataset/Bakso/ezeepasar_bakso_sapi_unyil_isi_50_pcs_full01_baj5blnl.jpeg  \n",
            "  inflating: dataset/Bakso/f3e8530a-6052-4b92-bfcc-e0c98a4e4761.jpeg  \n",
            "  inflating: dataset/Bakso/f7338beccfb84f63d27aa5b363ef9e92.jpg_960x960q80.jpg_.jpeg  \n",
            "  inflating: dataset/Bakso/id-11134207-7qukw-ljutnmapnj1eb7_tn.jpeg  \n",
            "  inflating: dataset/Bakso/id-11134207-7r98q-lq0q9ttfmdiw54_tn.jpeg  \n",
            "  inflating: dataset/Bakso/images (1).jpeg  \n",
            "  inflating: dataset/Bakso/images (2).jpeg  \n",
            "  inflating: dataset/Bakso/images (3).jpeg  \n",
            "  inflating: dataset/Bakso/images (4).jpeg  \n",
            "  inflating: dataset/Bakso/images.jpeg  \n",
            "  inflating: dataset/Bakso/jvGxZYtJZb0J.jpeg  \n",
            "  inflating: dataset/Bakso/lovepik-farmhouse-lean-meatballs-png-image_401509181_wh1200.jpeg  \n",
            "  inflating: dataset/Bakso/lovepik-meatball-png-image_400887148_wh1200.jpeg  \n",
            "  inflating: dataset/Bakso/meatballs-4682189_1280.jpeg  \n",
            "  inflating: dataset/Bakso/meatballs-6039656_640.jpeg  \n",
            "  inflating: dataset/Bakso/no-brand_bakso-baso-sapi-spesial_full01.jpeg  \n",
            "  inflating: dataset/Bakso/no_brand_baso_goreng_-basreng_mentah_cahaya_intan-_isi_25_pcs_full01_fea2eae0.jpeg  \n",
            "  inflating: dataset/Bakso/no_brand_baso_sapi_mentah_1kg_isi_25_full01_dv4hu4mi.jpeg  \n",
            "  inflating: dataset/Bakso/penjual-bakso-terdekat.jpeg  \n",
            "  inflating: dataset/Bakso/photo.jpeg  \n",
            "  inflating: dataset/Bakso/pngtree-meat-ball-chickpea-photo-png-image_14368156.jpeg  \n",
            "  inflating: dataset/Bakso/pngtree-meatballs-raw-main-dish-health-taste-png-image_12064371.jpeg  \n",
            "  inflating: dataset/Bakso/pngtree-raw-meatballs-close-up-on-wooden-raw-meatballs-bowl-pork-png-image_12081311.jpeg  \n",
            "  inflating: dataset/Bakso/pngtree-raw-meatballs-on-the-chopping-board-hash-hamburger-minced-meat-png-image_11795838.jpeg  \n",
            "  inflating: dataset/Bakso/pngtree-raw-meatballs-white-food-beef-png-image_11793702.jpeg  \n",
            "  inflating: dataset/Bakso/pngtree-raw-uncooked-meatballs-raw-meat-uncooked-ground-meat-photo-image_27813776.jpeg  \n",
            "  inflating: dataset/Bakso/r5wP7k84VcsM.jpeg  \n",
            "  inflating: dataset/Bakso/sg-11134201-7rd42-lvq7gdj3300z2e_tn.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/08a83f8cd70f95ba00bbb935d56e7f69.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/0a80fe420eeed7efc9f79f7439061d24.jpg_720x720q80.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/10-manfaat-sehat-makan-cabai-hijau-bisa-tingkatkan-imunitas-3.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/1200x600-ini-dia-14-manfaat-cabai-hijau-untuk-kesehatan-tak-banyak-yang-tahu-190923h.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/1200xauto-tanpa-ditambah-jeruk-nipis-ini-trik-bikin-sambal-cabai-hijau-agar-warnanya-tak-menghitam-2306057.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/1200xauto-trik-agar-sambal-cabai-hijau-tidak-pucat-dan-warnanya-tetap-segar-220923h.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/132517-182845aceb39c9e413e28fd549058cf8-132517 (1).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/132517-182845aceb39c9e413e28fd549058cf8-132517.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/13_07_2022_05_12_49_cabe_merah_besar.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/140ba653-0a26-4f2e-8716-f841d877b39c.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/15_07_2022_01_49_12_cabe_hijau_besarr.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/1698805379-picsay.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/1866975-resep-olahan-ikan-cabai-ijo.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/1_A8169530002065_20240816101255959_base.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/23b9949159513c4760d4eb02fcea161e.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/2682101997.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/27821-resep-daging-cabai-hijau-ala-chef-devina-hermawan.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/47c62408-5e15-4899-9e8d-2350a68f6b29.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/5-Tips-Pilih-Cabe-Hijau-untuk-Bahan-Sambal-Ijo.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/5-rahasia-cabai-hijau-untuk-kesehatan-termasuk-cegah-kanker_m_.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/5r9xpnh5f4zdav2 (1).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/5r9xpnh5f4zdav2.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/6304ce7c2001861f4c7d0068_Cabe_Rawit_Hijau-thumbnail-540x540.png  \n",
            "  inflating: dataset/Cabai Hijau/6942468_df65d591-1d1d-4957-9228-b2afe19c5367_640_640.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/7175728_5f4f7846-748a-45ef-9923-1c1d19934791_1000_1000.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/76f8126d9334130b22d4f4beca5bb06c.png_720x720q80.png  \n",
            "  inflating: dataset/Cabai Hijau/7793791_c4719406-4cac-4f43-844b-3cc25b78e2d9_1560_1560.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/8d0ed3e8-bcff-4125-a7e5-9b51030ca51a.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/AbVddo8lAT0X.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/CABE-RAWIT-HIJAU-100-GR-GRADE-B-_1_d6afbfe0-d0e5-4350-b608-872a13822bfb-removebg-preview.png  \n",
            "  inflating: dataset/Cabai Hijau/CABEHIJAUBESAR500G2-removebg-preview.png  \n",
            "  inflating: dataset/Cabai Hijau/Cabai-Hijau.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/Cabe-Hijau-Besar.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/Cabe-Hijau.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/Cara-masak-cabe-hijau-agar-warnanya-tetap-hijau.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/Resep-Daging-Cabai-Hijau-yang-Enak-dan-Mudah-Dibuat-Cocok-untuk-Pemula-1981436850.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/S89bfb9bc6cae4c9385196586637e105dS.jpg_720x720q80.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/Screenshot_20231216-105418_Instagram-3480461077.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/Tumis-Cabai-Hijau.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/a6esumxnqjkc431.png  \n",
            "  inflating: dataset/Cabai Hijau/ase-cabai-hijau-keriting-ala-kampung-foto-resep-utama.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/ayam-cabe-hijau-1.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/ayam-penyet-cabe-ijo-aa-sipit-viral-di-grand-indonesia-4_169.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/brd-44261_cabe-hijau-besar-100-gr-cabai-tanjung-chili-rempah-masakan-fresh_full01.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/bum-002IB_750x.png  \n",
            "  inflating: dataset/Cabai Hijau/c810157d-07ac-4e7e-9a85-c8f3e94789a2.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/cabai-hijau (1).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/cabai-hijau (2).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/cabai-hijau-_171004143108-996.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/cabai-hijau-ampuh-cerahkan-kulit-7FOA78vPvE.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/cabai-hijau-besar.png  \n",
            "  inflating: dataset/Cabai Hijau/cabai_rawit_hijau.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/cabaijpg-20210914055618.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/cabaijpg-20230115120919.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/cabe-keriting-hijau-1-SESA_1-removebg-preview.png  \n",
            "  inflating: dataset/Cabai Hijau/cabe1.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/cabehbesar_580x.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/cabehijau_1200x1200.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (1).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (10).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (11).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (12).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (13).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (14).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (15).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (16).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (17).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (18).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (19).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (2).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (20).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (21).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (22).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (23).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (3).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (4).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (5).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (6).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (7).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (8).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download (9).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/download.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/fe0fa5f2-a1a6-4e49-a6ef-f2769b7239e2-article-1586091067 (1).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/fe0fa5f2-a1a6-4e49-a6ef-f2769b7239e2-article-1586091067.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/hb.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/hq720.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/iwjcsw5nztcp5ep.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/jangan-takut-pedas-ini-10-manfaat-makan-cabai-hijau-bagi-kesehatan-Wa9o4cyzLu.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/kedaisayur_cabe_rawit_hijau_500_gram-kedaimart_full01_c16de52t.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/maxresdefault (1).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/maxresdefault.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/no_brand_cabe_-_cabai_hijau_besar_petik_segar_1_kg_full01_h6pz8dhq.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/no_brands_cabe_cabai_hijau_besar_full03_mazgxgtg.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/png-transparent-green-chili-pepper.png  \n",
            "  inflating: dataset/Cabai Hijau/pngtree-fresh-green-chili-on-png-background-png-image_2629076.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/pngtree-green-chili-png-image_4355616.png  \n",
            "  inflating: dataset/Cabai Hijau/produk_1537342967.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/resep-oseng-ikan-sepat-cabe-hijau-1_43 (1).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/resep-oseng-ikan-sepat-cabe-hijau-1_43.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/resep-sambal-leunca-cabe-hijau_43 (1).jpeg  \n",
            "  inflating: dataset/Cabai Hijau/resep-sambal-leunca-cabe-hijau_43.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/rsz_cara_menyimpan_cabai_hijauj-20221216023916.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/three-hit-chili-peppers-white-ba-20220403120218.jpeg  \n",
            "  inflating: dataset/Cabai Hijau/tidak_ada_merk_cabe_hijau_keriting_segar_1kg_cabai_fresh_1_kg_full01_6b5a4c02.jpeg  \n",
            "  inflating: dataset/Cabai Merah/00ae9d7b-6950-4784-bd0c-8c0a43518183.jpeg  \n",
            "  inflating: dataset/Cabai Merah/09915b62-3fcd-4246-b7d5-576d262be47d.jpeg  \n",
            "  inflating: dataset/Cabai Merah/1000009212.jpeg  \n",
            "  inflating: dataset/Cabai Merah/1304505334.jpeg  \n",
            "  inflating: dataset/Cabai Merah/2.jpeg  \n",
            "  inflating: dataset/Cabai Merah/20160527Harga-Cabai-Merah-Naik-270516-Pf-2.jpeg  \n",
            "  inflating: dataset/Cabai Merah/20231102-20221208-img20221208123354.jpeg  \n",
            "  inflating: dataset/Cabai Merah/20240308_-_Deputi_Bapanas_ungkap_Alasan_Kenaikan_Harga_Cabai_Merah_Besar_di_Pasaran.jpeg  \n",
            "  inflating: dataset/Cabai Merah/20240324-cabai-nora.jpeg  \n",
            "  inflating: dataset/Cabai Merah/20241004-img-20241003-114038.jpeg  \n",
            "  inflating: dataset/Cabai Merah/21_07_2022_05_19_30_cabe_merah_besar_kg.jpeg  \n",
            "  inflating: dataset/Cabai Merah/47219446534-cabe.jpeg  \n",
            "  inflating: dataset/Cabai Merah/4741_cabe.jpeg  \n",
            "  inflating: dataset/Cabai Merah/4vj3tjyswxhwg3u.jpeg  \n",
            "  inflating: dataset/Cabai Merah/53NBzv7r3ML42pxWGrWLn9hP7luyappz3ppDBzsm.jpeg  \n",
            "  inflating: dataset/Cabai Merah/609faf35be344.jpeg  \n",
            "  inflating: dataset/Cabai Merah/6318679f3fd8c_20220907164255-1.jpeg  \n",
            "  inflating: dataset/Cabai Merah/863285.jpeg  \n",
            "  inflating: dataset/Cabai Merah/Cabai-Dery-Ridwansah-4.jpeg  \n",
            "  inflating: dataset/Cabai Merah/Cabai-Merah-Bahan-Masakan-yang-Dicintai-Warga-Indonesia.jpeg  \n",
            "  inflating: dataset/Cabai Merah/Cabai-merah-besar-di-HST-berubah-signifikan.jpeg  \n",
            "  inflating: dataset/Cabai Merah/CabeRawitMerahOrganik200GR.jpeg  \n",
            "  inflating: dataset/Cabai Merah/Chilipeber.jpeg  \n",
            "  inflating: dataset/Cabai Merah/Foto-oleh-The-Sport-Review.jpeg  \n",
            "  inflating: dataset/Cabai Merah/Harga-cabai-merah-naik.jpeg  \n",
            "  inflating: dataset/Cabai Merah/IMG-20220126-WA0007_1280x.jpeg  \n",
            "  inflating: dataset/Cabai Merah/IMG_20231101_014216.jpeg  \n",
            "  inflating: dataset/Cabai Merah/MENJAGA-MUTU-CABAI-MERAH-DENGAN-PANEN-YANG-BAIK-DAN-BENAR-366x400.jpeg  \n",
            "  inflating: dataset/Cabai Merah/Mengenal-Manfaat-Cabai-Merah-Bagi-Kesehatan.jpeg  \n",
            "  inflating: dataset/Cabai Merah/ay9zalrmxoep8ov.jpeg  \n",
            "  inflating: dataset/Cabai Merah/brc-2013660000000-1.jpeg  \n",
            "  inflating: dataset/Cabai Merah/brd-44261_tanaman-buah-cabai-merah-besar-cabe-merah-besar_full01.jpeg  \n",
            "  inflating: dataset/Cabai Merah/c7bcecab529ba4a1967d4a06357517a6.jpeg  \n",
            "  inflating: dataset/Cabai Merah/cabai-mb.jpeg  \n",
            "  inflating: dataset/Cabai Merah/cabai-merah (1).jpeg  \n",
            "  inflating: dataset/Cabai Merah/cabai-merah (2).jpeg  \n",
            "  inflating: dataset/Cabai Merah/cabai-merah.jpeg  \n",
            "  inflating: dataset/Cabai Merah/cabai_merah.jpeg  \n",
            "  inflating: dataset/Cabai Merah/cabai_merah_kramat_jati.jpeg  \n",
            "  inflating: dataset/Cabai Merah/cabai_produksi.jpeg  \n",
            "  inflating: dataset/Cabai Merah/cabaijpg-20230115120919.jpeg  \n",
            "  inflating: dataset/Cabai Merah/cabe-cabai-merah-keriting-red-600nw-2427609949.jpeg  \n",
            "  inflating: dataset/Cabai Merah/cara_budidaya_cabe.jpeg  \n",
            "  inflating: dataset/Cabai Merah/cayenne-peppers-2779828_1280.jpeg  \n",
            "  inflating: dataset/Cabai Merah/chilli-pepper-dark-surface.jpeg  \n",
            "  inflating: dataset/Cabai Merah/cmk_580x.jpeg  \n",
            "  inflating: dataset/Cabai Merah/d8d94c5b2ce5d4a83600a9d4101c4f.jpeg  \n",
            "  inflating: dataset/Cabai Merah/download (1).jpeg  \n",
            "  inflating: dataset/Cabai Merah/download (10).jpeg  \n",
            "  inflating: dataset/Cabai Merah/download (11).jpeg  \n",
            "  inflating: dataset/Cabai Merah/download (12).jpeg  \n",
            "  inflating: dataset/Cabai Merah/download (13).jpeg  \n",
            "  inflating: dataset/Cabai Merah/download (14).jpeg  \n",
            "  inflating: dataset/Cabai Merah/download (15).jpeg  \n",
            "  inflating: dataset/Cabai Merah/download (16).jpeg  \n",
            "  inflating: dataset/Cabai Merah/download (17).jpeg  \n",
            "  inflating: dataset/Cabai Merah/download (18).jpeg  \n",
            "  inflating: dataset/Cabai Merah/download (2).jpeg  \n",
            "  inflating: dataset/Cabai Merah/download (3).jpeg  \n",
            "  inflating: dataset/Cabai Merah/download (4).jpeg  \n",
            "  inflating: dataset/Cabai Merah/download (5).jpeg  \n",
            "  inflating: dataset/Cabai Merah/download (6).jpeg  \n",
            "  inflating: dataset/Cabai Merah/download (7).jpeg  \n",
            "  inflating: dataset/Cabai Merah/download (8).jpeg  \n",
            "  inflating: dataset/Cabai Merah/download (9).jpeg  \n",
            "  inflating: dataset/Cabai Merah/download.jpeg  \n",
            "  inflating: dataset/Cabai Merah/dunia_sayur_online_cabe_merah_keriting_100_gram_full01_h75ztglj.jpeg  \n",
            "  inflating: dataset/Cabai Merah/f6c77d68f0748e1c5f11973439b9a2f6.jpeg  \n",
            "  inflating: dataset/Cabai Merah/f804ff_0d7ba5a7b69d498d8399edc972e0d482mv2.jpeg  \n",
            "  inflating: dataset/Cabai Merah/fe0fa5f2-a1a6-4e49-a6ef-f2769b7239e2-article-1586091067.jpeg  \n",
            "  inflating: dataset/Cabai Merah/freshbox_cabai-merah-keriting-sayuran--250-g-_full07.jpeg  \n",
            "  inflating: dataset/Cabai Merah/harga-cabai-masih-menjadi-komoditas-yang-mengalami-kenaikan-pada-jumat-112-harga-cabai-merah-dan-cabe-rawit-telah-mengalami-ke-10_169.jpeg  \n",
            "  inflating: dataset/Cabai Merah/harga-cabai-merah-di-pasar-senapela.jpeg  \n",
            "  inflating: dataset/Cabai Merah/harga-cabai-merah-keriting-di-pasar-kramat-jati-turun-3_169.jpeg  \n",
            "  inflating: dataset/Cabai Merah/harga-cabai-merah-tingkat-petani-turun-di-aceh-13o4x-dom-copy.jpeg  \n",
            "  inflating: dataset/Cabai Merah/harga-cabai-rawit-makin-pedas-jelang-idul-adha-tembus-rp-50-ribu-per-kg-4_169.jpeg  \n",
            "  inflating: dataset/Cabai Merah/harga-cabe-semakin-pedas-7_169.jpeg  \n",
            "  inflating: dataset/Cabai Merah/harga_cabai_merah_di_pasar_tradisional_kota_medan.jpeg  \n",
            "  inflating: dataset/Cabai Merah/hq720.jpeg  \n",
            "  inflating: dataset/Cabai Merah/image-20231201150242.jpeg  \n",
            "  inflating: dataset/Cabai Merah/images.jpeg  \n",
            "  inflating: dataset/Cabai Merah/longchili_530x@2x.jpeg  \n",
            "  inflating: dataset/Cabai Merah/news_68716_1480668953.jpeg  \n",
            "  inflating: dataset/Cabai Merah/oem_cabe_merah_besar_-_cabai_merah_besar_segar_1_kg_full01_qodan37r.jpeg  \n",
            "  inflating: dataset/Cabai Merah/pedagang-memotong-cabai-merah-keritinh-yang-dijual-di-kawasan-pasar-pondok-gede-jakarta-rabu-2962022-cnbc-indonesiamuhammad-sa-9_169.jpeg  \n",
            "  inflating: dataset/Cabai Merah/pngtree-red-pepper-png-image_5617132.jpeg  \n",
            "  inflating: dataset/Cabai Merah/tak-hanya-pedas-banyak-manfaat-cabai-untuk-kesehatan-tubuh.jpeg  \n",
            "  inflating: dataset/Cabai Merah/top-view-red-chili-peppers-600nw-2489224461.jpeg  \n",
            "  inflating: dataset/Sosis/022723a9-f443-4a49-9ded-5dc11fe743cc.jpeg  \n",
            "  inflating: dataset/Sosis/124b5834-ee89-459b-b24f-09439dcfa940.jpeg  \n",
            "  inflating: dataset/Sosis/2019-09-13-10-39-02.jpeg  \n",
            "  inflating: dataset/Sosis/23027a0e-1eaf-432f-a9cd-0b0b13af2759.jpeg  \n",
            "  inflating: dataset/Sosis/3439659_b00eb195-d177-47b8-b62a-333374374f0b_700_700.jpeg  \n",
            "  inflating: dataset/Sosis/7432194_b1dd9d03-be7e-49f7-8e49-6afb737ad15a_1224_1224.jpeg  \n",
            "  inflating: dataset/Sosis/BEmMfUfaLcjl.jpeg  \n",
            "  inflating: dataset/Sosis/Kenali-Karakteristik-pada-Produk-Sosis-yang-Bagus.jpeg  \n",
            "  inflating: dataset/Sosis/Plastic-Casing-for-Raw-Sausage-Cooked-Sausage.jpeg  \n",
            "  inflating: dataset/Sosis/S4f956818fc2b42a3885c74271310c2b3H.jpg_360x360q75.jpg_.jpeg  \n",
            "  inflating: dataset/Sosis/Saf27ee3db28b45aca407776a9ad4d073Y.jpeg  \n",
            "  inflating: dataset/Sosis/Sd19cd91435104461b7c832e82c3d578a4.jpg_360x360q75.jpg_.jpeg  \n",
            "  inflating: dataset/Sosis/YewoHeJ6Fg.jpeg  \n",
            "  inflating: dataset/Sosis/c38a8c90-7b49-47f2-8220-371c23dd3ae9.jpeg  \n",
            "  inflating: dataset/Sosis/d9333-sosis-bakar-jumbo.jpeg  \n",
            "  inflating: dataset/Sosis/depositphotos_110000718-stock-photo-raw-sausages-for-grill.jpeg  \n",
            "  inflating: dataset/Sosis/depositphotos_13866045-stock-photo-raw-sausage-and-ingredient.jpeg  \n",
            "  inflating: dataset/Sosis/depositphotos_13940133-stock-photo-isolated-raw-sausage.jpeg  \n",
            "  inflating: dataset/Sosis/depositphotos_38491121-stock-photo-sausage-on.jpeg  \n",
            "  inflating: dataset/Sosis/depositphotos_44011387-stock-photo-raw-sausage.jpeg  \n",
            "  inflating: dataset/Sosis/depositphotos_445101280-stock-photo-raw-meat-sausages-isolated-white.jpeg  \n",
            "  inflating: dataset/Sosis/depositphotos_45516641-stock-photo-raw-sausages.jpeg  \n",
            "  inflating: dataset/Sosis/depositphotos_46147619-stock-photo-raw-sausages.jpeg  \n",
            "  inflating: dataset/Sosis/depositphotos_647278330-stock-photo-one-fresh-raw-sausage-isolated.jpeg  \n",
            "  inflating: dataset/Sosis/depositphotos_70391545-stock-photo-raw-sausages-on-white-background.jpeg  \n",
            "  inflating: dataset/Sosis/depositphotos_8368710-stock-photo-isolated-raw-sausage-and-parsley.jpeg  \n",
            "  inflating: dataset/Sosis/download (1).jpeg  \n",
            "  inflating: dataset/Sosis/download (10).jpeg  \n",
            "  inflating: dataset/Sosis/download (11).jpeg  \n",
            "  inflating: dataset/Sosis/download (12).jpeg  \n",
            "  inflating: dataset/Sosis/download (13).jpeg  \n",
            "  inflating: dataset/Sosis/download (14).jpeg  \n",
            "  inflating: dataset/Sosis/download (15).jpeg  \n",
            "  inflating: dataset/Sosis/download (16).jpeg  \n",
            "  inflating: dataset/Sosis/download (17).jpeg  \n",
            "  inflating: dataset/Sosis/download (18).jpeg  \n",
            "  inflating: dataset/Sosis/download (19).jpeg  \n",
            "  inflating: dataset/Sosis/download (2).jpeg  \n",
            "  inflating: dataset/Sosis/download (20).jpeg  \n",
            "  inflating: dataset/Sosis/download (21).jpeg  \n",
            "  inflating: dataset/Sosis/download (3).jpeg  \n",
            "  inflating: dataset/Sosis/download (4).jpeg  \n",
            "  inflating: dataset/Sosis/download (5).jpeg  \n",
            "  inflating: dataset/Sosis/download (6).jpeg  \n",
            "  inflating: dataset/Sosis/download (7).jpeg  \n",
            "  inflating: dataset/Sosis/download (8).jpeg  \n",
            "  inflating: dataset/Sosis/download (9).jpeg  \n",
            "  inflating: dataset/Sosis/download.jpeg  \n",
            "  inflating: dataset/Sosis/edb174b5e8244c22f43be349622c7d18.jpg_360x360q75.jpg_.jpeg  \n",
            "  inflating: dataset/Sosis/mettwurst-6166303_1280.jpeg  \n",
            "  inflating: dataset/Sosis/oem_lapciong-lapchiong-sosis-babi-medan-enakkkk-500g_full01.jpeg  \n",
            "  inflating: dataset/Sosis/png-clipart-sausage-hot-dog-stuffing-turkey-casing-attractive-ham-food-chicken-meat.jpeg  \n",
            "  inflating: dataset/Sosis/png-clipart-uncooked-sausage-platter-pack-of-thin-beef-sausages-food-sausages.jpeg  \n",
            "  inflating: dataset/Sosis/png-transparent-bratwurst-sausage-ham-salami-frankfurter-wurstchen-luncheon-meat-food-chicken-meat-raw-meat.jpeg  \n",
            "  inflating: dataset/Sosis/pngtree-3d-a-stack-of-raw-sausages-on-white-ceramic-plate-png-image_13114287.jpeg  \n",
            "  inflating: dataset/Sosis/pngtree-3d-raw-sausages-with-tomatoes-for-barbecue-png-image_13336441.jpeg  \n",
            "  inflating: dataset/Sosis/pngtree-artfully-arranged-ingredients-and-raw-sausages-on-a-white-textured-tray-image_13645170.jpeg  \n",
            "  inflating: dataset/Sosis/pngtree-pile-of-sausages-chain-raw-food-photo-picture-image_8236866.jpeg  \n",
            "  inflating: dataset/Sosis/pngtree-raw-sausages-isolated-on-white-background-beef-lunch-bbq-photo-image_33079708.jpeg  \n",
            "  inflating: dataset/Sosis/pngtree-raw-short-sausages-sausages-top-view-wurst-photo-image_24113876.jpeg  \n",
            "  inflating: dataset/Sosis/pngtree-uncooked-frankfurter-sausages-arranged-on-a-wooden-kitchen-table-shot-from-above-photo-image_40235864.jpeg  \n",
            "  inflating: dataset/Sosis/pngtree-variety-of-fresh-raw-sausages-made-from-pork-beef-and-chicken-displayed-on-a-black-background-photo-image_35031276.jpeg  \n",
            "  inflating: dataset/Sosis/pngtree-vienna-sausages-casing-uncooked-sausages-photo-image_22665944.jpeg  \n",
            "  inflating: dataset/Sosis/pngtree-vienna-sausages-chicken-sausage-salted-raw-photo-picture-image_8637189.jpeg  \n",
            "  inflating: dataset/Sosis/pngtree-vienna-sausages-chicken-sausages-raw-frankfurter-photo-image_23317646.jpeg  \n",
            "  inflating: dataset/Sosis/pngtree-vienna-sausages-raw-uncooked-chicken-sausages-photo-picture-image_8778934.jpeg  \n",
            "  inflating: dataset/Sosis/salsiccia4-e1469526616688-f04373ca9428bde3dcc199a92bb6fc6e.jpeg  \n",
            "  inflating: dataset/Sosis/sausage-556491_1280.jpeg  \n",
            "  inflating: dataset/Sosis/sausage-6922637_1280.jpeg  \n",
            "  inflating: dataset/Sosis/sausagescover.jpeg  \n",
            "  inflating: dataset/Sosis/so-eco_sosis-so-eco_full01.jpeg  \n",
            "  inflating: dataset/Sosis/sosis-kemasanjpg-20231220115018.jpeg  \n",
            "  inflating: dataset/Sosis/sosis-youtube.jpeg  \n",
            "  inflating: dataset/Sosis/stock-photo-raw-sausage-240594745.jpeg  \n",
            "  inflating: dataset/Sosis/the-sausage-891510_640.jpeg  \n",
            "  inflating: dataset/Sosis/vigo_sosis_vigo_sosis_vigo_ayam_900gr_isi_40_full01_ntxw0a3z.jpeg  \n",
            "  inflating: dataset/Tahu/051513477f781162ef38f8ba4baaa17c.jpeg  \n",
            "  inflating: dataset/Tahu/0eeadb0b-a32d-48ce-ba42-e0b59159fe33_menu-item-image_1625037248660.jpeg  \n",
            "  inflating: dataset/Tahu/12-manfaat-tahu-mentah-yang-nggak-disangka-sangka-rugi-lho-kalau-jijik-duluan-sebelum-mencobanya-200226z.jpeg  \n",
            "  inflating: dataset/Tahu/1428f3ab-10b6-400e-827d-5a654fb5abd4.jpeg  \n",
            "  inflating: dataset/Tahu/1665734972-5dfc2aa9541dd4058c4ebf47.jpeg  \n",
            "  inflating: dataset/Tahu/1721187thumb-IMG-4965-1024780x390.jpeg  \n",
            "  inflating: dataset/Tahu/2062996887.jpeg  \n",
            "  inflating: dataset/Tahu/2454501031.jpeg  \n",
            "  inflating: dataset/Tahu/276d7e0e-9da9-4b9a-a5fd-781ed98e072a_169.jpeg  \n",
            "  inflating: dataset/Tahu/28873263252-img_20210103_084105.jpeg  \n",
            "  inflating: dataset/Tahu/2ea848f77ca8f597be7f48112b3882.png  \n",
            "  inflating: dataset/Tahu/32771269-27d7-4a68-ac2f-ed96d9c5459b.jpeg  \n",
            "  inflating: dataset/Tahu/49d8223a-9729-43f2-98df-515a3def49ab.jpeg  \n",
            "  inflating: dataset/Tahu/5-efek-samping-makan-tahu-terhadap-kesehatan-5CEgbFQi9o.jpeg  \n",
            "  inflating: dataset/Tahu/5805385_d6a668ad-bef2-49e8-9828-3b340aaf4fd6_620_620.jpeg  \n",
            "  inflating: dataset/Tahu/5fca23a2-7a6e-4269-8030-ca21fc89e0aa_Go-Biz_20210802_234854 (1).jpeg  \n",
            "  inflating: dataset/Tahu/5fca23a2-7a6e-4269-8030-ca21fc89e0aa_Go-Biz_20210802_234854.jpeg  \n",
            "  inflating: dataset/Tahu/Berbahaya-Bagi-Kesehatan-Tubuh--Jangan-Lagi-Mengkonsumsi-Tahu-Mentah--master-1997819319.jpeg  \n",
            "  inflating: dataset/Tahu/Manfaat-Makan-Tahu-Mentah-dan-Risiko-yang-Perlu-Diketahui.jpeg  \n",
            "  inflating: dataset/Tahu/Nlo74ITYrv1M.jpeg  \n",
            "  inflating: dataset/Tahu/S181d0cb5bb5448a38f820f6b3c83bc79l.jpeg  \n",
            "  inflating: dataset/Tahu/S3e71a25e52f042c398e803f14cc6e4a8n.jpg_720x720q80.jpeg  \n",
            "  inflating: dataset/Tahu/S76ad2ad0515c4915b4d89a9247b2a700B.jpg_720x720q80.jpeg  \n",
            "  inflating: dataset/Tahu/Sbdcf7fa20f1b4990b42f8e4b3e37f8abx.jpg_720x720q80.jpeg  \n",
            "  inflating: dataset/Tahu/Ternyata-Mengkonsumsi-Tahu-Mentah-Berbahaya-Bagi-Kesehatan-Tubuh-master-1399708411.jpeg  \n",
            "  inflating: dataset/Tahu/Towang-Tahu-Kuning-250-Gr-_2_43501b07-f6c1-464c-ac6b-74589ac17640-removebg-preview.png  \n",
            "  inflating: dataset/Tahu/U9AE17L4AO33PSAE.jpeg  \n",
            "  inflating: dataset/Tahu/ZdUfVAUUGYmO.jpeg  \n",
            "  inflating: dataset/Tahu/begini-cara-menyimpan-tahu-agar-tidak-asam-dan-lebih-awet.jpeg  \n",
            "  inflating: dataset/Tahu/brd-44261_tahu-putih-kuning-mentah-segar-1-plastik-freshmarketlampung_full01-f3b1f69f.jpeg  \n",
            "  inflating: dataset/Tahu/cb312d05-208d-44cc-8c8e-6d7a4f6775be.jpeg  \n",
            "  inflating: dataset/Tahu/depositphotos_489554216-stock-photo-blocks-delicious-raw-tofu-basil.jpeg  \n",
            "  inflating: dataset/Tahu/download (1).jpeg  \n",
            "  inflating: dataset/Tahu/download (10).jpeg  \n",
            "  inflating: dataset/Tahu/download (11).jpeg  \n",
            "  inflating: dataset/Tahu/download (12).jpeg  \n",
            "  inflating: dataset/Tahu/download (13).jpeg  \n",
            "  inflating: dataset/Tahu/download (14).jpeg  \n",
            "  inflating: dataset/Tahu/download (15).jpeg  \n",
            "  inflating: dataset/Tahu/download (16).jpeg  \n",
            "  inflating: dataset/Tahu/download (17).jpeg  \n",
            "  inflating: dataset/Tahu/download (2).jpeg  \n",
            "  inflating: dataset/Tahu/download (3).jpeg  \n",
            "  inflating: dataset/Tahu/download (4).jpeg  \n",
            "  inflating: dataset/Tahu/download (5).jpeg  \n",
            "  inflating: dataset/Tahu/download (6).jpeg  \n",
            "  inflating: dataset/Tahu/download (7).jpeg  \n",
            "  inflating: dataset/Tahu/download (8).jpeg  \n",
            "  inflating: dataset/Tahu/download (9).jpeg  \n",
            "  inflating: dataset/Tahu/download.jpeg  \n",
            "  inflating: dataset/Tahu/downloadfile.jpeg  \n",
            "  inflating: dataset/Tahu/fe9436fc-74f1-4773-8159-552a5d679174.jpeg  \n",
            "  inflating: dataset/Tahu/hq720.jpeg  \n",
            "  inflating: dataset/Tahu/iVUS5Od9ZeMy.jpeg  \n",
            "  inflating: dataset/Tahu/ilustrasi-menyimpan-tahu-dalam-larutan-air-garam-untuk-menjaganya-lebih-tahan-lama.jpeg  \n",
            "  inflating: dataset/Tahu/ionJZqOPWYJt.jpeg  \n",
            "  inflating: dataset/Tahu/kerupuk-tahu.jpeg  \n",
            "  inflating: dataset/Tahu/manfaat-tahu-1024x512.jpeg  \n",
            "  inflating: dataset/Tahu/manfaat-tahu-dan-resep-sehat-olahannya.jpeg  \n",
            "  inflating: dataset/Tahu/maxresdefault.jpeg  \n",
            "  inflating: dataset/Tahu/no-brand_tahu-kuning-mentah-5-pcs_full01.jpeg  \n",
            "  inflating: dataset/Tahu/no-brand_tahu-mentah-bandung-500gram-isi-5-biji_full01.jpeg  \n",
            "  inflating: dataset/Tahu/no-brand_tahu-pong-mentah-per-pcs-tahu-gehu_full01.jpeg  \n",
            "  inflating: dataset/Tahu/no-brand_tahu-putih-mentah-3-pcs_full01.jpeg  \n",
            "  inflating: dataset/Tahu/no-brand_tahu-sumedang-mentah-pcs_full01.jpeg  \n",
            "  inflating: dataset/Tahu/photo (1).jpeg  \n",
            "  inflating: dataset/Tahu/photo.jpeg  \n",
            "  inflating: dataset/Tahu/pngtree-cubes-of-raw-tofu-on-transparent-background-png-image_13053532.png  \n",
            "  inflating: dataset/Tahu/pngtree-stacked-raw-tofu-with-sparkle-vector-png-image_12279032.png  \n",
            "  inflating: dataset/Tahu/raw-tofu-on-wooden-cutting-260nw-2247657743.jpeg  \n",
            "  inflating: dataset/Tahu/stock-photo-tahu-putih-or-tofu-one-of-raw-ingredient-food-made-from-fermented-soybean-extract-served-in-tosca-2009851967.jpeg  \n",
            "  inflating: dataset/Tahu/t_5eb67b1de39f3.jpeg  \n",
            "  inflating: dataset/Tahu/tahu-goreng-sambal-mentah-foto-resep-utama.jpeg  \n",
            "  inflating: dataset/Tahu/tahu-mentah-santan-kuning-pedas-foto-resep-utama.jpeg  \n",
            "  inflating: dataset/Tahu/tahu-putih_20160329_122556.jpeg  \n",
            "  inflating: dataset/Tahu/tahu-sumedang-satu-rasa-Layanan-fiks.jpeg  \n",
            "  inflating: dataset/Tahu/tahu-sutra.jpeg  \n",
            "  inflating: dataset/Tahu/tahu-takwa.jpeg  \n",
            "  inflating: dataset/Tahu/tempe-dan-tahu-hilang-di-pasaran-ini-faktanya-1_169.jpeg  \n",
            "  inflating: dataset/Tahu/tofu-4081697_1280jpg-20210905040619.jpeg  \n",
            "  inflating: dataset/Tempe/1200xauto-cara-membuat-tempe-mentah-enak-sederhana-dan-mudah-dibuat-200812a.jpeg  \n",
            "  inflating: dataset/Tempe/1287446-cara-membuat-tempe-mentah.jpeg  \n",
            "  inflating: dataset/Tempe/12d6d7f1-3fe6-414b-827a-8ce043b9a173.jpeg  \n",
            "  inflating: dataset/Tempe/20210328044433Tempe_Mentah_olahan.jpeg  \n",
            "  inflating: dataset/Tempe/2021090304203053ef07f7-1f4e-495e-965d-3d19b049bc6c_crop_74.jpeg  \n",
            "  inflating: dataset/Tempe/2435158120.jpeg  \n",
            "  inflating: dataset/Tempe/280d34c4ae1e4c8cc9456070e89a33af.jpeg  \n",
            "  inflating: dataset/Tempe/289A745B_9252_4EDF_AED5_F2AA6F8A2A43 (1).jpeg  \n",
            "  inflating: dataset/Tempe/289A745B_9252_4EDF_AED5_F2AA6F8A2A43.jpeg  \n",
            "  inflating: dataset/Tempe/2abfb3d1596f882c9a8a98b1edb80c.jpeg  \n",
            "  inflating: dataset/Tempe/559b295d3c23090a6ea04c9a6fa4a7b0.jpeg  \n",
            "  inflating: dataset/Tempe/600e2adfce9b1-tempe_1265_711.jpeg  \n",
            "  inflating: dataset/Tempe/62c3e1e52f9e2-manfaat-tempe.jpeg  \n",
            "  inflating: dataset/Tempe/65b8954e9c567-tahukah-anda-kalau-makan-tempe-lebih-baik-yang-mentah_1265_711.jpeg  \n",
            "  inflating: dataset/Tempe/91688891826-tempe_dan_kurma.jpeg  \n",
            "  inflating: dataset/Tempe/9ebb6df9ad550b1a43bfbb4ef6e2e193.jpeg  \n",
            "  inflating: dataset/Tempe/Manfaat-Tempe-Mentah-Bagi-Kesehatan-676377421.jpeg  \n",
            "  inflating: dataset/Tempe/Screenshot_20240924-201658_Chrome-3686494172.jpeg  \n",
            "  inflating: dataset/Tempe/Tempe-Mentah (2).jpeg  \n",
            "  inflating: dataset/Tempe/Tempe-Mentah.jpeg  \n",
            "  inflating: dataset/Tempe/a0fa18ef-5d73-4366-b605-e2aae18dbf81.jpeg  \n",
            "  inflating: dataset/Tempe/a51csn5erk6038t.jpeg  \n",
            "  inflating: dataset/Tempe/b4872520-bb1c-4775-b0fb-77edbbc74bc9.jpeg  \n",
            "  inflating: dataset/Tempe/bG9jYWw6Ly8vcHVibGlzaGVycy8xNDExODgvMjAyMzExMTAxNjI4LW1haW4uY3JvcHBlZF8xNjk5NjA4NTIwLmpwZw.jpeg  \n",
            "  inflating: dataset/Tempe/bb610e61-54af-48c7-ad33-2626adb7208e.jpeg  \n",
            "  inflating: dataset/Tempe/bc05d9165951fbeee1cc7a2f71ed919b.jpg_720x720q80.jpeg  \n",
            "  inflating: dataset/Tempe/brd-44261_tempe-mentah-segar-fresh-berkualitas-1-kotak_full01-d6c5a6a7.jpeg  \n",
            "  inflating: dataset/Tempe/c15ulb5m1c8eua4 (1).jpeg  \n",
            "  inflating: dataset/Tempe/c15ulb5m1c8eua4.jpeg  \n",
            "  inflating: dataset/Tempe/cca449950771af995a7522fa64df59f1.jpg_720x720q80.jpeg  \n",
            "  inflating: dataset/Tempe/d50ee03f-4e3e-4ae4-a564-9f1df55acbcb.jpeg  \n",
            "  inflating: dataset/Tempe/d78481098839737b09d6df8773537494.jpeg  \n",
            "  inflating: dataset/Tempe/depositphotos_6739322-stock-photo-tempeh.jpeg  \n",
            "  inflating: dataset/Tempe/desain-tanpajnp5ttfwyp1woduh.jpeg  \n",
            "  inflating: dataset/Tempe/download (1).jpeg  \n",
            "  inflating: dataset/Tempe/download (10).jpeg  \n",
            "  inflating: dataset/Tempe/download (11).jpeg  \n",
            "  inflating: dataset/Tempe/download (12).jpeg  \n",
            "  inflating: dataset/Tempe/download (13).jpeg  \n",
            "  inflating: dataset/Tempe/download (14).jpeg  \n",
            "  inflating: dataset/Tempe/download (15).jpeg  \n",
            "  inflating: dataset/Tempe/download (16).jpeg  \n",
            "  inflating: dataset/Tempe/download (17).jpeg  \n",
            "  inflating: dataset/Tempe/download (18).jpeg  \n",
            "  inflating: dataset/Tempe/download (19).jpeg  \n",
            "  inflating: dataset/Tempe/download (2).jpeg  \n",
            "  inflating: dataset/Tempe/download (3).jpeg  \n",
            "  inflating: dataset/Tempe/download (4).jpeg  \n",
            "  inflating: dataset/Tempe/download (5).jpeg  \n",
            "  inflating: dataset/Tempe/download (6).jpeg  \n",
            "  inflating: dataset/Tempe/download (7).jpeg  \n",
            "  inflating: dataset/Tempe/download (8).jpeg  \n",
            "  inflating: dataset/Tempe/download (9).jpeg  \n",
            "  inflating: dataset/Tempe/download.jpeg  \n",
            "  inflating: dataset/Tempe/ezgifcom-gif-maker-2023-11-11-20231111111411.jpeg  \n",
            "  inflating: dataset/Tempe/f9a95f78743f18eab9e633b113ceffd0.jpeg  \n",
            "  inflating: dataset/Tempe/ilustrasi-tempe-1.jpeg  \n",
            "  inflating: dataset/Tempe/ilustrasi-tempe-mentah-1_169.jpeg  \n",
            "  inflating: dataset/Tempe/ilustrasi-tempe-mentah.jpeg  \n",
            "  inflating: dataset/Tempe/ilustrasi-tempe-mentah_169.jpeg  \n",
            "  inflating: dataset/Tempe/image_750x_635fc5ee71c3d.jpeg  \n",
            "  inflating: dataset/Tempe/image_750x_64df50d86bfa9.jpeg  \n",
            "  inflating: dataset/Tempe/image_870x_647fec58da6f5.jpeg  \n",
            "  inflating: dataset/Tempe/img-20220525-wa0000-628fc6b553e2c333e522d162.jpeg  \n",
            "  inflating: dataset/Tempe/jose-2023-09-21T171730.013.jpeg  \n",
            "  inflating: dataset/Tempe/manfaat-tempe.jpeg  \n",
            "  inflating: dataset/Tempe/mario-2023-09-21T171645.154.jpeg  \n",
            "  inflating: dataset/Tempe/mini-retort-tempe-mentah.jpeg  \n",
            "  inflating: dataset/Tempe/no-brand_tempe-mentah-jumbo_full01.jpeg  \n",
            "  inflating: dataset/Tempe/pngtree-free-download-raw-tempe-png-image_8664543.png  \n",
            "  inflating: dataset/Tempe/pngtree-tempe-panjang-illustrations-png-image-png-image_6554105.jpeg  \n",
            "  inflating: dataset/Tempe/raw-tempe-tempe-mentah-makanan-full-enzim-probiotik-foto-resep-utama.jpeg  \n",
            "  inflating: dataset/Tempe/rsz_tempe-5553223_1280-3684215698.jpeg  \n",
            "  inflating: dataset/Tempe/sddefault.jpeg  \n",
            "  inflating: dataset/Tempe/sliced-triangle-raw-tempeh-tempe-20230302023355.jpeg  \n",
            "  inflating: dataset/Tempe/stock-photo-raw-tempeh-or-tempe-mentah-bulat-tempeh-slices-in-wooden-plate-raw-soybean-seeds-in-a-brown-2037503906.jpeg  \n",
            "  inflating: dataset/Tempe/stock-photo-raw-tempeh-or-tempe-mentah-bulat-tempeh-slices-in-wooden-plate-raw-soybean-seeds-in-a-brown-2037503930.jpeg  \n",
            "  inflating: dataset/Tempe/tempe (1).jpeg  \n",
            "  inflating: dataset/Tempe/tempe-3.jpeg  \n",
            "  inflating: dataset/Tempe/tempe-mentah (1).jpeg  \n",
            "  inflating: dataset/Tempe/tempe-mentah-doktersehat.jpeg  \n",
            "  inflating: dataset/Tempe/tempe-mentah-foto-resep-utama.jpeg  \n",
            "  inflating: dataset/Tempe/tempe-mentah-raw-tempeh-uncooked-260nw-2267605551.jpeg  \n",
            "  inflating: dataset/Tempe/tempe-mentah_596819-290.jpeg  \n",
            "  inflating: dataset/Tempe/tempe.jpeg  \n",
            "  inflating: dataset/Tempe/tempeh-indonesian-traditional-food-made-from-fermented-soybeans_431906-308.jpeg  \n",
            "  inflating: dataset/Tempe/vr9737ghi3z7dff.jpeg  \n",
            "  inflating: dataset/Tempe/z2f273scae52c78 (1).jpeg  \n",
            "  inflating: dataset/Tempe/z2f273scae52c78.jpeg  \n",
            "  inflating: dataset/Waluh/0_15db2965-f823-4354-b10b-4f1f2c9478b8_1280_720.jpeg  \n",
            "  inflating: dataset/Waluh/14099774121413212831.jpeg  \n",
            "  inflating: dataset/Waluh/155603307735042_c22e6272-ae1b-41ff-8d6c-952650bb5ced.jpeg  \n",
            "  inflating: dataset/Waluh/1960822f92cdeab1a0a30c0a97d0ab28.jpeg  \n",
            "  inflating: dataset/Waluh/1d990411cc0016fd8774f73db547f320.jpeg  \n",
            "  inflating: dataset/Waluh/1fa9f560-b10d-481a-873b-70cd9f1e65b8.jpeg  \n",
            "  inflating: dataset/Waluh/20130107pumpkins.jpeg  \n",
            "  inflating: dataset/Waluh/20200905_203502.jpeg  \n",
            "  inflating: dataset/Waluh/23-bubur-waluh-2153110893.jpeg  \n",
            "  inflating: dataset/Waluh/250px-Waluh.jpeg  \n",
            "  inflating: dataset/Waluh/3032004866.jpeg  \n",
            "  inflating: dataset/Waluh/461273243_1580455899522005_6667348653879165442_n.jpeg  \n",
            "  inflating: dataset/Waluh/64ccaaeb208d9-waluh-kukus.jpeg  \n",
            "  inflating: dataset/Waluh/64ccaafea9776-waluh-kukus.jpeg  \n",
            "  inflating: dataset/Waluh/64ccab1164b89-waluh-kukus.jpeg  \n",
            "  inflating: dataset/Waluh/748755171.jpeg  \n",
            "  inflating: dataset/Waluh/81b0271a8c32286398ac58711f01d811.jpeg  \n",
            "  inflating: dataset/Waluh/853c898634b3c77af353fc309a897b5d.jpg_720x720q80.jpeg  \n",
            "  inflating: dataset/Waluh/88b9232d-f7d2-43db-8fa7-2c8430ec19ad.jpeg  \n",
            "  inflating: dataset/Waluh/91959fe8-35c8-4605-93f6-7b3d72e3caa0.jpeg  \n",
            "  inflating: dataset/Waluh/Cucurbita_2019_G1.jpeg  \n",
            "  inflating: dataset/Waluh/IMG_20210823_161736.jpeg  \n",
            "  inflating: dataset/Waluh/IMG_20210823_161900.jpeg  \n",
            "  inflating: dataset/Waluh/Panen-Waluh.jpeg  \n",
            "  inflating: dataset/Waluh/Pumpkins.jpeg  \n",
            "  inflating: dataset/Waluh/Red-Lampion.jpeg  \n",
            "  inflating: dataset/Waluh/Sbe3723c389b340d3905895332089a550M.jpg_720x720q80.jpeg  \n",
            "  inflating: dataset/Waluh/TAbWNH4F20230329100851.jpg.jpeg  \n",
            "  inflating: dataset/Waluh/Waluh-labu-parang-labu-kuning.jpeg  \n",
            "  inflating: dataset/Waluh/buah-waluh-terberat-6n77-dom.jpeg  \n",
            "  inflating: dataset/Waluh/camilan_Waluh.jpeg  \n",
            "  inflating: dataset/Waluh/download (1).jpeg  \n",
            "  inflating: dataset/Waluh/download (10).jpeg  \n",
            "  inflating: dataset/Waluh/download (12).jpeg  \n",
            "  inflating: dataset/Waluh/download (13).jpeg  \n",
            "  inflating: dataset/Waluh/download (14).jpeg  \n",
            "  inflating: dataset/Waluh/download (15).jpeg  \n",
            "  inflating: dataset/Waluh/download (16).jpeg  \n",
            "  inflating: dataset/Waluh/download (17).jpeg  \n",
            "  inflating: dataset/Waluh/download (19).jpeg  \n",
            "  inflating: dataset/Waluh/download (2).jpeg  \n",
            "  inflating: dataset/Waluh/download (20).jpeg  \n",
            "  inflating: dataset/Waluh/download (3).jpeg  \n",
            "  inflating: dataset/Waluh/download (4).jpeg  \n",
            "  inflating: dataset/Waluh/download (5).jpeg  \n",
            "  inflating: dataset/Waluh/download (6).jpeg  \n",
            "  inflating: dataset/Waluh/download (7).jpeg  \n",
            "  inflating: dataset/Waluh/download (8).jpeg  \n",
            "  inflating: dataset/Waluh/download (9).jpeg  \n",
            "  inflating: dataset/Waluh/download.jpeg  \n",
            "  inflating: dataset/Waluh/eed56e80251137e99d21cadbf0fa1ceb.jpg_720x720q80.jpeg  \n",
            "  inflating: dataset/Waluh/f078f27765f0bd57819be246b739e2b1.jpeg  \n",
            "  inflating: dataset/Waluh/img-20230607-194430-64807bd708a8b566725601f2.jpeg  \n",
            "  inflating: dataset/Waluh/maxresdefault.jpeg  \n",
            "  inflating: dataset/Waluh/news_75386_1496472446.jpeg  \n",
            "  inflating: dataset/Waluh/no-brand_labu-kuning-waluh-sayur-labu-sayur-labu-kuning-buah-labu-kuning_full01.jpeg  \n",
            "  inflating: dataset/Waluh/no_brand_labu_kuning_-_waluh_-_walo_happyfruits_-_1buah_full01_jo80a69g.jpeg  \n",
            "  inflating: dataset/Waluh/pexels-jacqueline-smith-5704350-3241d69518fb4418eb841c3d4dc24ca6-dc36a0e842cb082ad8deb0f3eea20bcb_600x400.jpeg  \n",
            "  inflating: dataset/Waluh/potensi_44035.20.14.20105f4f0a1d348989.19536452.jpeg  \n",
            "  inflating: dataset/Waluh/potensi_4405f4f0a27b462f3.84782797.jpeg  \n",
            "  inflating: dataset/Waluh/waluh-juai-2014.jpeg  \n",
            "  inflating: dataset/Waluh/waluh.jpeg  \n",
            "  inflating: dataset/Waluh/waluh1.jpeg  \n",
            "  inflating: dataset/Waluh/waluh10.jpeg  \n",
            "  inflating: dataset/Waluh/waluh11.jpeg  \n",
            "  inflating: dataset/Waluh/waluh12.jpeg  \n",
            "  inflating: dataset/Waluh/waluh13.jpeg  \n",
            "  inflating: dataset/Waluh/waluh14.jpeg  \n",
            "  inflating: dataset/Waluh/waluh15.jpeg  \n",
            "  inflating: dataset/Waluh/waluh2.jpeg  \n",
            "  inflating: dataset/Waluh/waluh3.jpeg  \n",
            "  inflating: dataset/Waluh/waluh4.jpeg  \n",
            "  inflating: dataset/Waluh/waluh5.jpeg  \n",
            "  inflating: dataset/Waluh/waluh6.jpeg  \n",
            "  inflating: dataset/Waluh/waluh7.jpeg  \n",
            "  inflating: dataset/Waluh/waluh8.jpeg  \n",
            "  inflating: dataset/Waluh/waluh9.jpeg  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Data_Dir = './dataset'"
      ],
      "metadata": {
        "id": "AGt50Hux3XTN"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install ultralytics\n",
        "from ultralytics import YOLO"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "sU25gNjwVc8R",
        "outputId": "c11a7118-02bd-4799-8d0e-99214e29997a"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting ultralytics\n",
            "  Downloading ultralytics-8.3.36-py3-none-any.whl.metadata (35 kB)\n",
            "Requirement already satisfied: numpy>=1.23.0 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (1.26.4)\n",
            "Requirement already satisfied: matplotlib>=3.3.0 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (3.8.0)\n",
            "Requirement already satisfied: opencv-python>=4.6.0 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (4.10.0.84)\n",
            "Requirement already satisfied: pillow>=7.1.2 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (11.0.0)\n",
            "Requirement already satisfied: pyyaml>=5.3.1 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (6.0.2)\n",
            "Requirement already satisfied: requests>=2.23.0 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (2.32.3)\n",
            "Requirement already satisfied: scipy>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (1.13.1)\n",
            "Requirement already satisfied: torch>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (2.5.1+cu121)\n",
            "Requirement already satisfied: torchvision>=0.9.0 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (0.20.1+cu121)\n",
            "Requirement already satisfied: tqdm>=4.64.0 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (4.66.6)\n",
            "Requirement already satisfied: psutil in /usr/local/lib/python3.10/dist-packages (from ultralytics) (5.9.5)\n",
            "Requirement already satisfied: py-cpuinfo in /usr/local/lib/python3.10/dist-packages (from ultralytics) (9.0.0)\n",
            "Requirement already satisfied: pandas>=1.1.4 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (2.2.2)\n",
            "Requirement already satisfied: seaborn>=0.11.0 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (0.13.2)\n",
            "Collecting ultralytics-thop>=2.0.0 (from ultralytics)\n",
            "  Downloading ultralytics_thop-2.0.12-py3-none-any.whl.metadata (9.4 kB)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->ultralytics) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->ultralytics) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->ultralytics) (4.55.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->ultralytics) (1.4.7)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->ultralytics) (24.2)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->ultralytics) (3.2.0)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->ultralytics) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.1.4->ultralytics) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.1.4->ultralytics) (2024.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.23.0->ultralytics) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.23.0->ultralytics) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.23.0->ultralytics) (2.2.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.23.0->ultralytics) (2024.8.30)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch>=1.8.0->ultralytics) (3.16.1)\n",
            "Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch>=1.8.0->ultralytics) (4.12.2)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=1.8.0->ultralytics) (3.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=1.8.0->ultralytics) (3.1.4)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch>=1.8.0->ultralytics) (2024.10.0)\n",
            "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.10/dist-packages (from torch>=1.8.0->ultralytics) (1.13.1)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy==1.13.1->torch>=1.8.0->ultralytics) (1.3.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib>=3.3.0->ultralytics) (1.16.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=1.8.0->ultralytics) (3.0.2)\n",
            "Downloading ultralytics-8.3.36-py3-none-any.whl (887 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m887.3/887.3 kB\u001b[0m \u001b[31m13.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading ultralytics_thop-2.0.12-py3-none-any.whl (26 kB)\n",
            "Installing collected packages: ultralytics-thop, ultralytics\n",
            "Successfully installed ultralytics-8.3.36 ultralytics-thop-2.0.12\n",
            "Creating new Ultralytics Settings v0.0.6 file ✅ \n",
            "View Ultralytics Settings with 'yolo settings' or at '/root/.config/Ultralytics/settings.json'\n",
            "Update Settings with 'yolo settings key=value', i.e. 'yolo settings runs_dir=path/to/dir'. For help see https://docs.ultralytics.com/quickstart/#ultralytics-settings.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = YOLO('yolov8n.pt')  # Replace 'yolov8n.pt' with your desired model"
      ],
      "metadata": {
        "id": "d7V1tB2cVoeH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e0f74d6e-8cab-4065-8389-8c3c559df7e1"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading https://github.com/ultralytics/assets/releases/download/v8.3.0/yolov8n.pt to 'yolov8n.pt'...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 6.25M/6.25M [00:00<00:00, 75.7MB/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Import Library**"
      ],
      "metadata": {
        "id": "jfMxFF2969ss"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "Wpq9T2Mi2XoA"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Split Train Val Dataset**"
      ],
      "metadata": {
        "id": "z60R6Guq7N6e"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def train_val_datasets():\n",
        "\n",
        "    training_dataset, validation_dataset = tf.keras.utils.image_dataset_from_directory(\n",
        "        directory=Data_Dir,\n",
        "        image_size=(120,120),\n",
        "        batch_size=10,\n",
        "        validation_split=0.2,\n",
        "        subset=\"both\",\n",
        "        seed=42\n",
        "    )\n",
        "    return training_dataset, validation_dataset"
      ],
      "metadata": {
        "id": "9Fu8-llK5GkE"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "training_dataset, validation_dataset = train_val_datasets()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gAWHbxhc7wOG",
        "outputId": "feff3297-7849-4e98-f40a-02a6ddb2b707"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 690 files belonging to 8 classes.\n",
            "Using 552 files for training.\n",
            "Using 138 files for validation.\n"
          ]
        }
      ]
    },
    {
      "source": [
        "import tensorflow as tf\n",
        "import matplotlib.pyplot as plt\n",
        "from ultralytics import YOLO\n",
        "import numpy as np # Make sure numpy is imported\n",
        "import cv2\n",
        "\n",
        "def train_val_datasets():\n",
        "    training_dataset, validation_dataset = tf.keras.utils.image_dataset_from_directory(\n",
        "        directory=Data_Dir,  # Make sure Data_Dir is correctly defined\n",
        "        image_size=(150,150),\n",
        "        batch_size=10,\n",
        "        validation_split=0.2,\n",
        "        subset=\"both\",\n",
        "        seed=42\n",
        "    )\n",
        "    return training_dataset, validation_dataset\n",
        "\n",
        "# Load the YOLO model\n",
        "model = YOLO(\"yolov8n.pt\")  # or your desired model path\n",
        "\n",
        "# Get the training and validation datasets\n",
        "training_dataset, validation_dataset = train_val_datasets()\n",
        "\n",
        "# Iterate through the training dataset and make predictions\n",
        "for images, labels in training_dataset:\n",
        "    # Convert the TensorFlow tensor to a NumPy array and ensure it's in the correct format\n",
        "    images_np = images.numpy()\n",
        "\n",
        "    # Iterate over each image in the batch\n",
        "    for img in images_np:\n",
        "        # Convert the image to uint8 (expected by OpenCV)\n",
        "        img = cv2.cvtColor(img.astype(np.uint8), cv2.COLOR_RGB2BGR)\n",
        "\n",
        "        # Perform inference on individual images\n",
        "        results = model(img)\n",
        "        # Process the results, e.g., display them or store them\n",
        "        for result in results:\n",
        "            result.save()  # Or result.print(), result.save(), etc.\n",
        "\n",
        "# Similarly, iterate through the validation dataset\n",
        "for images, labels in validation_dataset:\n",
        "    # Convert the TensorFlow tensor to a NumPy array and ensure it's in the correct format\n",
        "    images_np = images.numpy()\n",
        "\n",
        "    # Iterate over each image in the batch\n",
        "    for img in images_np:\n",
        "        # Convert the image to uint8 (expected by OpenCV)\n",
        "        img = cv2.cvtColor(img.astype(np.uint8), cv2.COLOR_RGB2BGR)\n",
        "\n",
        "        # Perform inference on individual images\n",
        "        results = model(img)\n",
        "        # Process the results\n",
        "        for result in results:\n",
        "            result.save()  # Or result.print(), result.save(), etc."
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "i3dqMdzfX0yJ",
        "outputId": "54e95df2-e0f5-4d50-b684-e235b1f74d45"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 690 files belonging to 8 classes.\n",
            "Using 552 files for training.\n",
            "Using 138 files for validation.\n",
            "\n",
            "0: 640x640 1 vase, 369.4ms\n",
            "Speed: 6.9ms preprocess, 369.4ms inference, 2.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 broccoli, 383.2ms\n",
            "Speed: 5.1ms preprocess, 383.2ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 350.8ms\n",
            "Speed: 4.4ms preprocess, 350.8ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 4 donuts, 354.5ms\n",
            "Speed: 4.2ms preprocess, 354.5ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 1 cake, 373.1ms\n",
            "Speed: 4.6ms preprocess, 373.1ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 oranges, 373.3ms\n",
            "Speed: 4.6ms preprocess, 373.3ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 persons, 395.3ms\n",
            "Speed: 4.4ms preprocess, 395.3ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 2 broccolis, 367.2ms\n",
            "Speed: 4.1ms preprocess, 367.2ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 279.6ms\n",
            "Speed: 4.3ms preprocess, 279.6ms inference, 1.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 237.6ms\n",
            "Speed: 4.1ms preprocess, 237.6ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 247.6ms\n",
            "Speed: 9.9ms preprocess, 247.6ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 hot dogs, 227.9ms\n",
            "Speed: 4.3ms preprocess, 227.9ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 232.4ms\n",
            "Speed: 4.2ms preprocess, 232.4ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 bowls, 1 orange, 1 donut, 243.1ms\n",
            "Speed: 3.5ms preprocess, 243.1ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 carrots, 246.5ms\n",
            "Speed: 3.9ms preprocess, 246.5ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 person, 247.5ms\n",
            "Speed: 4.0ms preprocess, 247.5ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 4 carrots, 233.8ms\n",
            "Speed: 4.2ms preprocess, 233.8ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 241.4ms\n",
            "Speed: 4.3ms preprocess, 241.4ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 kite, 245.5ms\n",
            "Speed: 4.3ms preprocess, 245.5ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cake, 227.1ms\n",
            "Speed: 4.5ms preprocess, 227.1ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cake, 243.6ms\n",
            "Speed: 8.8ms preprocess, 243.6ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 fire hydrant, 244.7ms\n",
            "Speed: 5.5ms preprocess, 244.7ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 240.1ms\n",
            "Speed: 4.9ms preprocess, 240.1ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 1 orange, 237.9ms\n",
            "Speed: 4.6ms preprocess, 237.9ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 251.2ms\n",
            "Speed: 4.7ms preprocess, 251.2ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bed, 232.6ms\n",
            "Speed: 3.9ms preprocess, 232.6ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 245.0ms\n",
            "Speed: 4.0ms preprocess, 245.0ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 person, 235.0ms\n",
            "Speed: 4.7ms preprocess, 235.0ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 242.4ms\n",
            "Speed: 5.8ms preprocess, 242.4ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 239.1ms\n",
            "Speed: 5.2ms preprocess, 239.1ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 245.1ms\n",
            "Speed: 5.0ms preprocess, 245.1ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 traffic lights, 238.1ms\n",
            "Speed: 4.6ms preprocess, 238.1ms inference, 2.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 vase, 250.0ms\n",
            "Speed: 4.1ms preprocess, 250.0ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 241.1ms\n",
            "Speed: 5.6ms preprocess, 241.1ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 4 carrots, 242.7ms\n",
            "Speed: 4.5ms preprocess, 242.7ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 235.3ms\n",
            "Speed: 5.1ms preprocess, 235.3ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 243.5ms\n",
            "Speed: 4.2ms preprocess, 243.5ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 236.7ms\n",
            "Speed: 4.9ms preprocess, 236.7ms inference, 1.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 245.6ms\n",
            "Speed: 4.8ms preprocess, 245.6ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 sandwichs, 233.3ms\n",
            "Speed: 4.0ms preprocess, 233.3ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 sandwichs, 284.6ms\n",
            "Speed: 4.2ms preprocess, 284.6ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 236.3ms\n",
            "Speed: 4.3ms preprocess, 236.3ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 238.2ms\n",
            "Speed: 4.0ms preprocess, 238.2ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 hot dogs, 234.3ms\n",
            "Speed: 4.1ms preprocess, 234.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 251.8ms\n",
            "Speed: 4.5ms preprocess, 251.8ms inference, 0.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 227.5ms\n",
            "Speed: 4.8ms preprocess, 227.5ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 237.6ms\n",
            "Speed: 4.1ms preprocess, 237.6ms inference, 0.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 person, 341.7ms\n",
            "Speed: 5.8ms preprocess, 341.7ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 357.6ms\n",
            "Speed: 4.1ms preprocess, 357.6ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 359.1ms\n",
            "Speed: 4.2ms preprocess, 359.1ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 oranges, 358.0ms\n",
            "Speed: 4.3ms preprocess, 358.0ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 orange, 351.7ms\n",
            "Speed: 4.0ms preprocess, 351.7ms inference, 2.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 person, 364.7ms\n",
            "Speed: 4.3ms preprocess, 364.7ms inference, 2.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cat, 362.6ms\n",
            "Speed: 5.5ms preprocess, 362.6ms inference, 2.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 5 oranges, 1 donut, 391.9ms\n",
            "Speed: 7.3ms preprocess, 391.9ms inference, 2.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cake, 399.4ms\n",
            "Speed: 4.2ms preprocess, 399.4ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 340.7ms\n",
            "Speed: 4.1ms preprocess, 340.7ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 227.8ms\n",
            "Speed: 4.2ms preprocess, 227.8ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 person, 1 sandwich, 257.2ms\n",
            "Speed: 4.2ms preprocess, 257.2ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 pizzas, 1 dining table, 229.2ms\n",
            "Speed: 4.0ms preprocess, 229.2ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 238.4ms\n",
            "Speed: 5.6ms preprocess, 238.4ms inference, 2.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 223.0ms\n",
            "Speed: 4.8ms preprocess, 223.0ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sheep, 264.0ms\n",
            "Speed: 5.0ms preprocess, 264.0ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 242.8ms\n",
            "Speed: 4.1ms preprocess, 242.8ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 232.5ms\n",
            "Speed: 4.9ms preprocess, 232.5ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 238.2ms\n",
            "Speed: 4.4ms preprocess, 238.2ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 broccoli, 248.6ms\n",
            "Speed: 4.7ms preprocess, 248.6ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 225.7ms\n",
            "Speed: 4.5ms preprocess, 225.7ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 potted plant, 234.3ms\n",
            "Speed: 5.2ms preprocess, 234.3ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 222.7ms\n",
            "Speed: 4.1ms preprocess, 222.7ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 278.4ms\n",
            "Speed: 4.8ms preprocess, 278.4ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 234.6ms\n",
            "Speed: 5.1ms preprocess, 234.6ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 5 bananas, 2 donuts, 233.4ms\n",
            "Speed: 4.9ms preprocess, 233.4ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 person, 1 carrot, 228.1ms\n",
            "Speed: 5.1ms preprocess, 228.1ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 2 hot dogs, 262.6ms\n",
            "Speed: 5.0ms preprocess, 262.6ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 sandwichs, 1 dining table, 244.5ms\n",
            "Speed: 4.8ms preprocess, 244.5ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 236.4ms\n",
            "Speed: 4.6ms preprocess, 236.4ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 229.7ms\n",
            "Speed: 4.4ms preprocess, 229.7ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 260.9ms\n",
            "Speed: 4.6ms preprocess, 260.9ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 cakes, 235.3ms\n",
            "Speed: 4.3ms preprocess, 235.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 237.9ms\n",
            "Speed: 4.3ms preprocess, 237.9ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 231.8ms\n",
            "Speed: 4.0ms preprocess, 231.8ms inference, 0.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 sandwichs, 257.0ms\n",
            "Speed: 4.2ms preprocess, 257.0ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 6 bananas, 6 donuts, 233.9ms\n",
            "Speed: 4.2ms preprocess, 233.9ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 234.0ms\n",
            "Speed: 4.7ms preprocess, 234.0ms inference, 1.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 232.5ms\n",
            "Speed: 4.8ms preprocess, 232.5ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 251.9ms\n",
            "Speed: 4.2ms preprocess, 251.9ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 oranges, 3 carrots, 232.4ms\n",
            "Speed: 4.3ms preprocess, 232.4ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 1 cake, 223.7ms\n",
            "Speed: 5.0ms preprocess, 223.7ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 banana, 231.7ms\n",
            "Speed: 4.6ms preprocess, 231.7ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 263.5ms\n",
            "Speed: 4.3ms preprocess, 263.5ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 person, 237.6ms\n",
            "Speed: 5.1ms preprocess, 237.6ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 carrots, 225.8ms\n",
            "Speed: 4.9ms preprocess, 225.8ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 236.1ms\n",
            "Speed: 4.0ms preprocess, 236.1ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 knife, 1 scissors, 251.6ms\n",
            "Speed: 5.6ms preprocess, 251.6ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 233.5ms\n",
            "Speed: 4.7ms preprocess, 233.5ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 persons, 2 carrots, 5 hot dogs, 1 donut, 356.3ms\n",
            "Speed: 4.1ms preprocess, 356.3ms inference, 2.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bird, 405.6ms\n",
            "Speed: 4.0ms preprocess, 405.6ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 banana, 15 donuts, 345.2ms\n",
            "Speed: 4.0ms preprocess, 345.2ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 1 broccoli, 373.8ms\n",
            "Speed: 4.4ms preprocess, 373.8ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 374.9ms\n",
            "Speed: 4.2ms preprocess, 374.9ms inference, 2.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 368.0ms\n",
            "Speed: 4.0ms preprocess, 368.0ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 5 donuts, 1 teddy bear, 420.5ms\n",
            "Speed: 4.2ms preprocess, 420.5ms inference, 2.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 sandwichs, 1 cake, 379.6ms\n",
            "Speed: 4.8ms preprocess, 379.6ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 13 bananas, 249.4ms\n",
            "Speed: 4.2ms preprocess, 249.4ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 giraffe, 235.6ms\n",
            "Speed: 4.3ms preprocess, 235.6ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 244.0ms\n",
            "Speed: 4.4ms preprocess, 244.0ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 teddy bear, 228.2ms\n",
            "Speed: 4.8ms preprocess, 228.2ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 birds, 229.9ms\n",
            "Speed: 5.2ms preprocess, 229.9ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bottle, 244.8ms\n",
            "Speed: 4.4ms preprocess, 244.8ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 1 vase, 285.1ms\n",
            "Speed: 8.6ms preprocess, 285.1ms inference, 3.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 potted plant, 229.4ms\n",
            "Speed: 4.9ms preprocess, 229.4ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 245.1ms\n",
            "Speed: 4.7ms preprocess, 245.1ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 vase, 224.6ms\n",
            "Speed: 4.2ms preprocess, 224.6ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bottle, 245.0ms\n",
            "Speed: 4.4ms preprocess, 245.0ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bird, 227.9ms\n",
            "Speed: 4.1ms preprocess, 227.9ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 245.1ms\n",
            "Speed: 4.8ms preprocess, 245.1ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 229.8ms\n",
            "Speed: 4.0ms preprocess, 229.8ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 hot dog, 1 cake, 1 dining table, 247.0ms\n",
            "Speed: 5.2ms preprocess, 247.0ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 banana, 222.7ms\n",
            "Speed: 4.9ms preprocess, 222.7ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 donut, 239.1ms\n",
            "Speed: 5.6ms preprocess, 239.1ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cup, 2 donuts, 2 cakes, 230.1ms\n",
            "Speed: 3.9ms preprocess, 230.1ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 cakes, 234.7ms\n",
            "Speed: 4.1ms preprocess, 234.7ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 carrots, 2 toothbrushs, 234.0ms\n",
            "Speed: 4.1ms preprocess, 234.0ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 clock, 253.2ms\n",
            "Speed: 4.1ms preprocess, 253.2ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 person, 4 carrots, 227.2ms\n",
            "Speed: 4.1ms preprocess, 227.2ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 donut, 240.8ms\n",
            "Speed: 5.1ms preprocess, 240.8ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 7 bananas, 227.3ms\n",
            "Speed: 4.2ms preprocess, 227.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 237.9ms\n",
            "Speed: 4.5ms preprocess, 237.9ms inference, 0.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 3 sandwichs, 225.5ms\n",
            "Speed: 4.1ms preprocess, 225.5ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 broccolis, 241.0ms\n",
            "Speed: 6.0ms preprocess, 241.0ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 donut, 230.1ms\n",
            "Speed: 4.0ms preprocess, 230.1ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 247.3ms\n",
            "Speed: 5.1ms preprocess, 247.3ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 donut, 237.6ms\n",
            "Speed: 4.1ms preprocess, 237.6ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 banana, 7 donuts, 250.7ms\n",
            "Speed: 4.0ms preprocess, 250.7ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 229.2ms\n",
            "Speed: 4.0ms preprocess, 229.2ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 243.5ms\n",
            "Speed: 4.1ms preprocess, 243.5ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 knife, 1 dining table, 231.4ms\n",
            "Speed: 4.3ms preprocess, 231.4ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 carrots, 1 hot dog, 248.1ms\n",
            "Speed: 4.2ms preprocess, 248.1ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 233.0ms\n",
            "Speed: 4.4ms preprocess, 233.0ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 262.6ms\n",
            "Speed: 4.3ms preprocess, 262.6ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 239.0ms\n",
            "Speed: 4.0ms preprocess, 239.0ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 4 carrots, 236.2ms\n",
            "Speed: 4.0ms preprocess, 236.2ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 310.8ms\n",
            "Speed: 4.2ms preprocess, 310.8ms inference, 2.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 dog, 358.6ms\n",
            "Speed: 4.3ms preprocess, 358.6ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 357.4ms\n",
            "Speed: 3.9ms preprocess, 357.4ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 358.8ms\n",
            "Speed: 4.2ms preprocess, 358.8ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 dog, 1 wine glass, 2 bowls, 358.7ms\n",
            "Speed: 4.1ms preprocess, 358.7ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 359.3ms\n",
            "Speed: 4.1ms preprocess, 359.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 fork, 1 bowl, 1 dining table, 366.6ms\n",
            "Speed: 4.0ms preprocess, 366.6ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 402.2ms\n",
            "Speed: 12.7ms preprocess, 402.2ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 5 carrots, 392.8ms\n",
            "Speed: 4.9ms preprocess, 392.8ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 339.9ms\n",
            "Speed: 4.0ms preprocess, 339.9ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 225.4ms\n",
            "Speed: 4.9ms preprocess, 225.4ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 4 carrots, 3 hot dogs, 236.7ms\n",
            "Speed: 3.9ms preprocess, 236.7ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 hot dog, 245.0ms\n",
            "Speed: 5.3ms preprocess, 245.0ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cat, 1 dog, 232.0ms\n",
            "Speed: 4.0ms preprocess, 232.0ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bird, 229.1ms\n",
            "Speed: 4.6ms preprocess, 229.1ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 238.5ms\n",
            "Speed: 4.1ms preprocess, 238.5ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 242.7ms\n",
            "Speed: 4.0ms preprocess, 242.7ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 238.5ms\n",
            "Speed: 4.3ms preprocess, 238.5ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 232.8ms\n",
            "Speed: 4.3ms preprocess, 232.8ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 240.7ms\n",
            "Speed: 4.3ms preprocess, 240.7ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 236.7ms\n",
            "Speed: 5.5ms preprocess, 236.7ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 sandwich, 1 broccoli, 1 cake, 231.2ms\n",
            "Speed: 4.5ms preprocess, 231.2ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 220.0ms\n",
            "Speed: 4.2ms preprocess, 220.0ms inference, 0.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 carrots, 244.2ms\n",
            "Speed: 4.6ms preprocess, 244.2ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 246.8ms\n",
            "Speed: 4.2ms preprocess, 246.8ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 234.5ms\n",
            "Speed: 4.6ms preprocess, 234.5ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 keyboard, 229.6ms\n",
            "Speed: 4.7ms preprocess, 229.6ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 263.8ms\n",
            "Speed: 12.6ms preprocess, 263.8ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 potted plant, 239.4ms\n",
            "Speed: 3.7ms preprocess, 239.4ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 229.8ms\n",
            "Speed: 4.1ms preprocess, 229.8ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 228.6ms\n",
            "Speed: 4.8ms preprocess, 228.6ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 stop sign, 1 cake, 255.7ms\n",
            "Speed: 4.0ms preprocess, 255.7ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 persons, 1 broccoli, 1 carrot, 228.4ms\n",
            "Speed: 4.4ms preprocess, 228.4ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 1 donut, 238.5ms\n",
            "Speed: 6.2ms preprocess, 238.5ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bottle, 225.9ms\n",
            "Speed: 5.0ms preprocess, 225.9ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bird, 1 broccoli, 250.3ms\n",
            "Speed: 5.0ms preprocess, 250.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cup, 1 bowl, 2 sandwichs, 1 cake, 236.2ms\n",
            "Speed: 4.5ms preprocess, 236.2ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 banana, 1 broccoli, 2 donuts, 288.7ms\n",
            "Speed: 7.2ms preprocess, 288.7ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 225.9ms\n",
            "Speed: 5.3ms preprocess, 225.9ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cat, 257.7ms\n",
            "Speed: 5.5ms preprocess, 257.7ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 224.7ms\n",
            "Speed: 3.4ms preprocess, 224.7ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 228.5ms\n",
            "Speed: 4.6ms preprocess, 228.5ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 orange, 1 hot dog, 230.7ms\n",
            "Speed: 4.5ms preprocess, 230.7ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 253.0ms\n",
            "Speed: 4.1ms preprocess, 253.0ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 sandwichs, 1 broccoli, 231.2ms\n",
            "Speed: 5.0ms preprocess, 231.2ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 237.7ms\n",
            "Speed: 4.5ms preprocess, 237.7ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 229.9ms\n",
            "Speed: 4.2ms preprocess, 229.9ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 5 carrots, 293.1ms\n",
            "Speed: 4.3ms preprocess, 293.1ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 apple, 242.0ms\n",
            "Speed: 4.9ms preprocess, 242.0ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 kite, 353.4ms\n",
            "Speed: 5.2ms preprocess, 353.4ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 394.3ms\n",
            "Speed: 4.3ms preprocess, 394.3ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 donut, 1 cake, 352.5ms\n",
            "Speed: 4.3ms preprocess, 352.5ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 cakes, 354.6ms\n",
            "Speed: 4.2ms preprocess, 354.6ms inference, 2.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 broccoli, 1 carrot, 370.9ms\n",
            "Speed: 4.7ms preprocess, 370.9ms inference, 2.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 364.7ms\n",
            "Speed: 4.3ms preprocess, 364.7ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 399.2ms\n",
            "Speed: 4.1ms preprocess, 399.2ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 333.4ms\n",
            "Speed: 4.1ms preprocess, 333.4ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 255.0ms\n",
            "Speed: 4.3ms preprocess, 255.0ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 banana, 243.3ms\n",
            "Speed: 5.1ms preprocess, 243.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 238.5ms\n",
            "Speed: 5.8ms preprocess, 238.5ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bottle, 2 vases, 231.9ms\n",
            "Speed: 4.5ms preprocess, 231.9ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 cups, 226.9ms\n",
            "Speed: 4.2ms preprocess, 226.9ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 1 donut, 240.8ms\n",
            "Speed: 5.6ms preprocess, 240.8ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bird, 236.2ms\n",
            "Speed: 5.0ms preprocess, 236.2ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 235.2ms\n",
            "Speed: 5.9ms preprocess, 235.2ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 1 hot dog, 235.3ms\n",
            "Speed: 5.4ms preprocess, 235.3ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 244.6ms\n",
            "Speed: 4.4ms preprocess, 244.6ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 7 carrots, 249.5ms\n",
            "Speed: 4.2ms preprocess, 249.5ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 person, 235.5ms\n",
            "Speed: 5.7ms preprocess, 235.5ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bottle, 235.1ms\n",
            "Speed: 4.0ms preprocess, 235.1ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cake, 252.4ms\n",
            "Speed: 3.7ms preprocess, 252.4ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 bananas, 235.8ms\n",
            "Speed: 4.1ms preprocess, 235.8ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sheep, 241.7ms\n",
            "Speed: 7.2ms preprocess, 241.7ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 orange, 6 donuts, 238.6ms\n",
            "Speed: 6.7ms preprocess, 238.6ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 241.5ms\n",
            "Speed: 5.0ms preprocess, 241.5ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 donut, 232.8ms\n",
            "Speed: 4.1ms preprocess, 232.8ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 241.3ms\n",
            "Speed: 5.0ms preprocess, 241.3ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 238.3ms\n",
            "Speed: 4.5ms preprocess, 238.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 8 donuts, 245.1ms\n",
            "Speed: 5.0ms preprocess, 245.1ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cat, 225.4ms\n",
            "Speed: 5.1ms preprocess, 225.4ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 238.6ms\n",
            "Speed: 4.8ms preprocess, 238.6ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 225.8ms\n",
            "Speed: 4.4ms preprocess, 225.8ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 carrots, 240.7ms\n",
            "Speed: 6.6ms preprocess, 240.7ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 237.5ms\n",
            "Speed: 4.3ms preprocess, 237.5ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 knife, 1 banana, 244.3ms\n",
            "Speed: 4.2ms preprocess, 244.3ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 8 hot dogs, 231.3ms\n",
            "Speed: 5.0ms preprocess, 231.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 242.3ms\n",
            "Speed: 4.3ms preprocess, 242.3ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 2 broccolis, 237.9ms\n",
            "Speed: 4.5ms preprocess, 237.9ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 241.0ms\n",
            "Speed: 5.4ms preprocess, 241.0ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 4 carrots, 1 hot dog, 269.1ms\n",
            "Speed: 6.0ms preprocess, 269.1ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 237.3ms\n",
            "Speed: 5.5ms preprocess, 237.3ms inference, 1.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 fire hydrant, 237.3ms\n",
            "Speed: 4.3ms preprocess, 237.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 235.5ms\n",
            "Speed: 5.1ms preprocess, 235.5ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 donuts, 245.5ms\n",
            "Speed: 4.8ms preprocess, 245.5ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 person, 231.8ms\n",
            "Speed: 4.1ms preprocess, 231.8ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 280.3ms\n",
            "Speed: 4.2ms preprocess, 280.3ms inference, 2.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 369.7ms\n",
            "Speed: 5.2ms preprocess, 369.7ms inference, 2.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 banana, 441.5ms\n",
            "Speed: 13.0ms preprocess, 441.5ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bottle, 3 carrots, 362.0ms\n",
            "Speed: 4.0ms preprocess, 362.0ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 apples, 5 donuts, 365.1ms\n",
            "Speed: 4.9ms preprocess, 365.1ms inference, 2.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 bowls, 358.8ms\n",
            "Speed: 4.0ms preprocess, 358.8ms inference, 2.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 378.0ms\n",
            "Speed: 5.0ms preprocess, 378.0ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 donut, 396.6ms\n",
            "Speed: 4.3ms preprocess, 396.6ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 379.2ms\n",
            "Speed: 4.8ms preprocess, 379.2ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 347.4ms\n",
            "Speed: 4.2ms preprocess, 347.4ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 235.8ms\n",
            "Speed: 5.7ms preprocess, 235.8ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 donut, 230.5ms\n",
            "Speed: 4.1ms preprocess, 230.5ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bird, 244.6ms\n",
            "Speed: 6.3ms preprocess, 244.6ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 teddy bear, 240.4ms\n",
            "Speed: 5.3ms preprocess, 240.4ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cake, 233.2ms\n",
            "Speed: 4.2ms preprocess, 233.2ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 7 carrots, 226.6ms\n",
            "Speed: 4.5ms preprocess, 226.6ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 person, 2 donuts, 251.2ms\n",
            "Speed: 6.6ms preprocess, 251.2ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 234.2ms\n",
            "Speed: 4.3ms preprocess, 234.2ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 oranges, 229.3ms\n",
            "Speed: 4.5ms preprocess, 229.3ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 224.1ms\n",
            "Speed: 4.6ms preprocess, 224.1ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 244.3ms\n",
            "Speed: 4.4ms preprocess, 244.3ms inference, 1.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 236.9ms\n",
            "Speed: 5.2ms preprocess, 236.9ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 246.3ms\n",
            "Speed: 4.4ms preprocess, 246.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 231.0ms\n",
            "Speed: 5.1ms preprocess, 231.0ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 carrot, 251.2ms\n",
            "Speed: 4.5ms preprocess, 251.2ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 229.8ms\n",
            "Speed: 6.1ms preprocess, 229.8ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 227.9ms\n",
            "Speed: 5.1ms preprocess, 227.9ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 donut, 223.2ms\n",
            "Speed: 4.0ms preprocess, 223.2ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 donuts, 3 teddy bears, 235.3ms\n",
            "Speed: 4.0ms preprocess, 235.3ms inference, 2.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 247.1ms\n",
            "Speed: 4.1ms preprocess, 247.1ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 234.3ms\n",
            "Speed: 5.2ms preprocess, 234.3ms inference, 0.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 232.1ms\n",
            "Speed: 4.2ms preprocess, 232.1ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 248.1ms\n",
            "Speed: 5.9ms preprocess, 248.1ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 236.5ms\n",
            "Speed: 7.5ms preprocess, 236.5ms inference, 1.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 227.5ms\n",
            "Speed: 3.5ms preprocess, 227.5ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 banana, 226.6ms\n",
            "Speed: 5.4ms preprocess, 226.6ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 233.0ms\n",
            "Speed: 5.5ms preprocess, 233.0ms inference, 1.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 sheeps, 5 donuts, 236.9ms\n",
            "Speed: 4.5ms preprocess, 236.9ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 bananas, 234.8ms\n",
            "Speed: 4.7ms preprocess, 234.8ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 228.1ms\n",
            "Speed: 5.1ms preprocess, 228.1ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 3 bananas, 242.9ms\n",
            "Speed: 3.9ms preprocess, 242.9ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 237.9ms\n",
            "Speed: 4.1ms preprocess, 237.9ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 bananas, 235.9ms\n",
            "Speed: 6.9ms preprocess, 235.9ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 bowls, 3 bananas, 3 broccolis, 236.0ms\n",
            "Speed: 4.2ms preprocess, 236.0ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 4 donuts, 246.7ms\n",
            "Speed: 4.4ms preprocess, 246.7ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 235.3ms\n",
            "Speed: 4.4ms preprocess, 235.3ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 teddy bear, 233.0ms\n",
            "Speed: 4.2ms preprocess, 233.0ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 1 bed, 225.8ms\n",
            "Speed: 4.0ms preprocess, 225.8ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 5 carrots, 2 hot dogs, 251.0ms\n",
            "Speed: 4.4ms preprocess, 251.0ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sports ball, 3 donuts, 330.4ms\n",
            "Speed: 4.6ms preprocess, 330.4ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 354.3ms\n",
            "Speed: 4.0ms preprocess, 354.3ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 hot dogs, 362.0ms\n",
            "Speed: 4.0ms preprocess, 362.0ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 apple, 1 donut, 401.3ms\n",
            "Speed: 4.5ms preprocess, 401.3ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 person, 348.5ms\n",
            "Speed: 4.0ms preprocess, 348.5ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 apples, 1 donut, 369.5ms\n",
            "Speed: 4.3ms preprocess, 369.5ms inference, 2.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 361.9ms\n",
            "Speed: 4.6ms preprocess, 361.9ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 sandwichs, 399.7ms\n",
            "Speed: 4.0ms preprocess, 399.7ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 oranges, 317.6ms\n",
            "Speed: 4.7ms preprocess, 317.6ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 donut, 228.2ms\n",
            "Speed: 4.6ms preprocess, 228.2ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 230.5ms\n",
            "Speed: 4.0ms preprocess, 230.5ms inference, 1.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 241.4ms\n",
            "Speed: 4.2ms preprocess, 241.4ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 246.9ms\n",
            "Speed: 5.1ms preprocess, 246.9ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 255.7ms\n",
            "Speed: 4.5ms preprocess, 255.7ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 umbrella, 236.8ms\n",
            "Speed: 4.0ms preprocess, 236.8ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 sandwichs, 236.0ms\n",
            "Speed: 4.1ms preprocess, 236.0ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 4 donuts, 245.4ms\n",
            "Speed: 4.4ms preprocess, 245.4ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 3 carrots, 229.0ms\n",
            "Speed: 4.0ms preprocess, 229.0ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 5 carrots, 238.6ms\n",
            "Speed: 4.4ms preprocess, 238.6ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 orange, 235.1ms\n",
            "Speed: 4.7ms preprocess, 235.1ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 244.0ms\n",
            "Speed: 4.2ms preprocess, 244.0ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 229.5ms\n",
            "Speed: 4.1ms preprocess, 229.5ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 carrots, 242.2ms\n",
            "Speed: 4.2ms preprocess, 242.2ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cake, 236.5ms\n",
            "Speed: 4.6ms preprocess, 236.5ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 person, 3 carrots, 244.1ms\n",
            "Speed: 4.6ms preprocess, 244.1ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 carrots, 1 hot dog, 229.5ms\n",
            "Speed: 4.2ms preprocess, 229.5ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 carrots, 246.5ms\n",
            "Speed: 4.0ms preprocess, 246.5ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 carrots, 229.3ms\n",
            "Speed: 3.9ms preprocess, 229.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 240.9ms\n",
            "Speed: 4.6ms preprocess, 240.9ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 11 carrots, 234.4ms\n",
            "Speed: 5.2ms preprocess, 234.4ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 sandwich, 1 broccoli, 1 donut, 1 cake, 242.9ms\n",
            "Speed: 4.6ms preprocess, 242.9ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 apples, 1 sandwich, 1 dining table, 229.4ms\n",
            "Speed: 4.6ms preprocess, 229.4ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 241.1ms\n",
            "Speed: 5.1ms preprocess, 241.1ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 223.4ms\n",
            "Speed: 6.2ms preprocess, 223.4ms inference, 1.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 apple, 1 orange, 247.3ms\n",
            "Speed: 6.7ms preprocess, 247.3ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 vase, 234.6ms\n",
            "Speed: 7.6ms preprocess, 234.6ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 hot dogs, 1 cell phone, 231.2ms\n",
            "Speed: 4.1ms preprocess, 231.2ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 banana, 234.8ms\n",
            "Speed: 4.2ms preprocess, 234.8ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 cakes, 1 potted plant, 1 dining table, 246.3ms\n",
            "Speed: 4.8ms preprocess, 246.3ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cake, 224.8ms\n",
            "Speed: 4.0ms preprocess, 224.8ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 8 donuts, 230.5ms\n",
            "Speed: 5.4ms preprocess, 230.5ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 donuts, 234.9ms\n",
            "Speed: 4.1ms preprocess, 234.9ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 241.5ms\n",
            "Speed: 4.1ms preprocess, 241.5ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 bananas, 3 donuts, 239.6ms\n",
            "Speed: 8.9ms preprocess, 239.6ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 5 hot dogs, 229.1ms\n",
            "Speed: 4.7ms preprocess, 229.1ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 9 donuts, 253.1ms\n",
            "Speed: 4.9ms preprocess, 253.1ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 236.3ms\n",
            "Speed: 4.5ms preprocess, 236.3ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 243.1ms\n",
            "Speed: 4.8ms preprocess, 243.1ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bird, 1 cake, 376.3ms\n",
            "Speed: 5.4ms preprocess, 376.3ms inference, 2.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 355.4ms\n",
            "Speed: 5.2ms preprocess, 355.4ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 sandwichs, 347.6ms\n",
            "Speed: 4.2ms preprocess, 347.6ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 banana, 1 broccoli, 353.0ms\n",
            "Speed: 4.6ms preprocess, 353.0ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 person, 4 carrots, 356.2ms\n",
            "Speed: 4.0ms preprocess, 356.2ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 banana, 385.8ms\n",
            "Speed: 4.4ms preprocess, 385.8ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 5 bananas, 367.9ms\n",
            "Speed: 4.0ms preprocess, 367.9ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 383.6ms\n",
            "Speed: 4.0ms preprocess, 383.6ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 fire hydrant, 1 cake, 381.4ms\n",
            "Speed: 4.2ms preprocess, 381.4ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 donut, 387.0ms\n",
            "Speed: 5.5ms preprocess, 387.0ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 232.9ms\n",
            "Speed: 4.4ms preprocess, 232.9ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 2 apples, 1 sandwich, 2 broccolis, 1 carrot, 235.1ms\n",
            "Speed: 4.2ms preprocess, 235.1ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 banana, 251.8ms\n",
            "Speed: 5.0ms preprocess, 251.8ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bottle, 225.2ms\n",
            "Speed: 4.9ms preprocess, 225.2ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 1 orange, 226.7ms\n",
            "Speed: 5.0ms preprocess, 226.7ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 orange, 1 broccoli, 260.7ms\n",
            "Speed: 5.5ms preprocess, 260.7ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 257.8ms\n",
            "Speed: 4.2ms preprocess, 257.8ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 2 donuts, 225.5ms\n",
            "Speed: 4.5ms preprocess, 225.5ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 6 bananas, 1 donut, 237.4ms\n",
            "Speed: 6.7ms preprocess, 237.4ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 229.6ms\n",
            "Speed: 4.4ms preprocess, 229.6ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 4 carrots, 2 hot dogs, 257.3ms\n",
            "Speed: 4.1ms preprocess, 257.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 teddy bear, 233.5ms\n",
            "Speed: 4.4ms preprocess, 233.5ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 vase, 241.3ms\n",
            "Speed: 5.1ms preprocess, 241.3ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 zebra, 229.3ms\n",
            "Speed: 4.5ms preprocess, 229.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 257.2ms\n",
            "Speed: 4.9ms preprocess, 257.2ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 245.0ms\n",
            "Speed: 8.0ms preprocess, 245.0ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 5 carrots, 1 hot dog, 228.4ms\n",
            "Speed: 5.2ms preprocess, 228.4ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 donut, 231.0ms\n",
            "Speed: 5.4ms preprocess, 231.0ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 256.8ms\n",
            "Speed: 5.4ms preprocess, 256.8ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 person, 1 cat, 1 donut, 223.9ms\n",
            "Speed: 5.5ms preprocess, 223.9ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 233.4ms\n",
            "Speed: 5.1ms preprocess, 233.4ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 231.1ms\n",
            "Speed: 4.6ms preprocess, 231.1ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 242.7ms\n",
            "Speed: 4.2ms preprocess, 242.7ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 dog, 249.2ms\n",
            "Speed: 4.3ms preprocess, 249.2ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 243.4ms\n",
            "Speed: 4.1ms preprocess, 243.4ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 242.3ms\n",
            "Speed: 4.3ms preprocess, 242.3ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 249.9ms\n",
            "Speed: 4.8ms preprocess, 249.9ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 teddy bear, 244.1ms\n",
            "Speed: 4.1ms preprocess, 244.1ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 3 bananas, 234.1ms\n",
            "Speed: 4.3ms preprocess, 234.1ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 235.8ms\n",
            "Speed: 4.1ms preprocess, 235.8ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 250.5ms\n",
            "Speed: 4.3ms preprocess, 250.5ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 241.8ms\n",
            "Speed: 4.3ms preprocess, 241.8ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 donuts, 1 cake, 233.4ms\n",
            "Speed: 4.7ms preprocess, 233.4ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 cakes, 229.3ms\n",
            "Speed: 4.6ms preprocess, 229.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 donuts, 240.6ms\n",
            "Speed: 7.7ms preprocess, 240.6ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 260.8ms\n",
            "Speed: 6.2ms preprocess, 260.8ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 1 hot dog, 239.8ms\n",
            "Speed: 4.2ms preprocess, 239.8ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 5 hot dogs, 245.7ms\n",
            "Speed: 5.3ms preprocess, 245.7ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 259.2ms\n",
            "Speed: 4.3ms preprocess, 259.2ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 4 carrots, 375.2ms\n",
            "Speed: 4.0ms preprocess, 375.2ms inference, 2.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 370.7ms\n",
            "Speed: 5.4ms preprocess, 370.7ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 375.9ms\n",
            "Speed: 7.9ms preprocess, 375.9ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 361.3ms\n",
            "Speed: 5.2ms preprocess, 361.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 sandwichs, 382.1ms\n",
            "Speed: 4.2ms preprocess, 382.1ms inference, 2.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 379.1ms\n",
            "Speed: 4.1ms preprocess, 379.1ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 661.0ms\n",
            "Speed: 4.3ms preprocess, 661.0ms inference, 2.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 persons, 1 carrot, 367.2ms\n",
            "Speed: 4.0ms preprocess, 367.2ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 carrots, 235.0ms\n",
            "Speed: 6.2ms preprocess, 235.0ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 235.5ms\n",
            "Speed: 5.5ms preprocess, 235.5ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 230.2ms\n",
            "Speed: 6.3ms preprocess, 230.2ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 dining table, 242.1ms\n",
            "Speed: 6.7ms preprocess, 242.1ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 sandwichs, 5 donuts, 246.8ms\n",
            "Speed: 4.1ms preprocess, 246.8ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 carrots, 6 hot dogs, 233.3ms\n",
            "Speed: 4.4ms preprocess, 233.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 233.5ms\n",
            "Speed: 4.1ms preprocess, 233.5ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 dog, 243.0ms\n",
            "Speed: 4.4ms preprocess, 243.0ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 247.1ms\n",
            "Speed: 4.9ms preprocess, 247.1ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 233.4ms\n",
            "Speed: 4.4ms preprocess, 233.4ms inference, 1.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 232.7ms\n",
            "Speed: 6.1ms preprocess, 232.7ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 248.8ms\n",
            "Speed: 4.2ms preprocess, 248.8ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 6 bananas, 4 donuts, 246.5ms\n",
            "Speed: 4.3ms preprocess, 246.5ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 4 broccolis, 22 carrots, 231.7ms\n",
            "Speed: 4.0ms preprocess, 231.7ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 2 carrots, 229.2ms\n",
            "Speed: 5.9ms preprocess, 229.2ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 252.4ms\n",
            "Speed: 4.3ms preprocess, 252.4ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 banana, 245.3ms\n",
            "Speed: 5.0ms preprocess, 245.3ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 229.4ms\n",
            "Speed: 4.3ms preprocess, 229.4ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 254.1ms\n",
            "Speed: 6.1ms preprocess, 254.1ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 person, 249.3ms\n",
            "Speed: 4.8ms preprocess, 249.3ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 apples, 252.7ms\n",
            "Speed: 5.1ms preprocess, 252.7ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 vase, 232.2ms\n",
            "Speed: 4.4ms preprocess, 232.2ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 228.8ms\n",
            "Speed: 4.1ms preprocess, 228.8ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 253.4ms\n",
            "Speed: 4.0ms preprocess, 253.4ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 242.9ms\n",
            "Speed: 5.2ms preprocess, 242.9ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 229.1ms\n",
            "Speed: 4.9ms preprocess, 229.1ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 4 hot dogs, 225.9ms\n",
            "Speed: 4.4ms preprocess, 225.9ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 245.9ms\n",
            "Speed: 4.6ms preprocess, 245.9ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 256.7ms\n",
            "Speed: 10.7ms preprocess, 256.7ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 231.2ms\n",
            "Speed: 4.3ms preprocess, 231.2ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 229.8ms\n",
            "Speed: 3.9ms preprocess, 229.8ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 245.4ms\n",
            "Speed: 4.0ms preprocess, 245.4ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 toothbrush, 241.3ms\n",
            "Speed: 4.2ms preprocess, 241.3ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 232.8ms\n",
            "Speed: 3.9ms preprocess, 232.8ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 228.1ms\n",
            "Speed: 4.1ms preprocess, 228.1ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 fire hydrant, 245.6ms\n",
            "Speed: 4.0ms preprocess, 245.6ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 1 orange, 1 broccoli, 1 dining table, 239.0ms\n",
            "Speed: 5.6ms preprocess, 239.0ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 1 hot dog, 235.3ms\n",
            "Speed: 4.1ms preprocess, 235.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 255.7ms\n",
            "Speed: 5.3ms preprocess, 255.7ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 bananas, 374.6ms\n",
            "Speed: 4.3ms preprocess, 374.6ms inference, 2.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 10 carrots, 358.2ms\n",
            "Speed: 4.1ms preprocess, 358.2ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 sandwich, 1 broccoli, 355.7ms\n",
            "Speed: 4.0ms preprocess, 355.7ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 373.4ms\n",
            "Speed: 4.0ms preprocess, 373.4ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 broccoli, 1 carrot, 344.0ms\n",
            "Speed: 4.2ms preprocess, 344.0ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 2 donuts, 381.3ms\n",
            "Speed: 4.3ms preprocess, 381.3ms inference, 2.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 372.9ms\n",
            "Speed: 4.2ms preprocess, 372.9ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 386.7ms\n",
            "Speed: 4.9ms preprocess, 386.7ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 persons, 1 broccoli, 1 carrot, 368.0ms\n",
            "Speed: 4.6ms preprocess, 368.0ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 280.4ms\n",
            "Speed: 9.1ms preprocess, 280.4ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 carrots, 230.8ms\n",
            "Speed: 4.3ms preprocess, 230.8ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 8 donuts, 243.7ms\n",
            "Speed: 4.6ms preprocess, 243.7ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 oranges, 271.1ms\n",
            "Speed: 4.1ms preprocess, 271.1ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 230.0ms\n",
            "Speed: 4.2ms preprocess, 230.0ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 oranges, 2 broccolis, 242.8ms\n",
            "Speed: 4.2ms preprocess, 242.8ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 251.5ms\n",
            "Speed: 4.3ms preprocess, 251.5ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 6 carrots, 3 hot dogs, 245.5ms\n",
            "Speed: 4.4ms preprocess, 245.5ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 donuts, 235.4ms\n",
            "Speed: 4.1ms preprocess, 235.4ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 4 carrots, 239.9ms\n",
            "Speed: 4.2ms preprocess, 239.9ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 5 carrots, 478.8ms\n",
            "Speed: 4.2ms preprocess, 478.8ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cake, 237.5ms\n",
            "Speed: 3.9ms preprocess, 237.5ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 orange, 3 carrots, 240.8ms\n",
            "Speed: 4.0ms preprocess, 240.8ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 4 carrots, 239.5ms\n",
            "Speed: 4.5ms preprocess, 239.5ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 239.9ms\n",
            "Speed: 4.2ms preprocess, 239.9ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 hot dogs, 231.5ms\n",
            "Speed: 6.2ms preprocess, 231.5ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 239.4ms\n",
            "Speed: 5.9ms preprocess, 239.4ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 4 bananas, 246.0ms\n",
            "Speed: 4.5ms preprocess, 246.0ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 254.4ms\n",
            "Speed: 4.1ms preprocess, 254.4ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 5 donuts, 236.6ms\n",
            "Speed: 4.2ms preprocess, 236.6ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 sandwichs, 236.8ms\n",
            "Speed: 11.5ms preprocess, 236.8ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 2 bananas, 239.5ms\n",
            "Speed: 5.0ms preprocess, 239.5ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 247.5ms\n",
            "Speed: 4.1ms preprocess, 247.5ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 231.7ms\n",
            "Speed: 4.4ms preprocess, 231.7ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 232.0ms\n",
            "Speed: 6.2ms preprocess, 232.0ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 233.0ms\n",
            "Speed: 5.9ms preprocess, 233.0ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 239.0ms\n",
            "Speed: 4.2ms preprocess, 239.0ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cake, 228.6ms\n",
            "Speed: 4.5ms preprocess, 228.6ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 donut, 233.5ms\n",
            "Speed: 4.5ms preprocess, 233.5ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 246.2ms\n",
            "Speed: 5.0ms preprocess, 246.2ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cake, 258.4ms\n",
            "Speed: 4.4ms preprocess, 258.4ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 229.2ms\n",
            "Speed: 4.8ms preprocess, 229.2ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 2 broccolis, 240.8ms\n",
            "Speed: 6.6ms preprocess, 240.8ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 13 donuts, 223.8ms\n",
            "Speed: 4.3ms preprocess, 223.8ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 sheeps, 1 teddy bear, 241.8ms\n",
            "Speed: 4.2ms preprocess, 241.8ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 231.7ms\n",
            "Speed: 4.1ms preprocess, 231.7ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 239.3ms\n",
            "Speed: 4.2ms preprocess, 239.3ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 238.0ms\n",
            "Speed: 4.3ms preprocess, 238.0ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 dining table, 306.1ms\n",
            "Speed: 5.5ms preprocess, 306.1ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 carrots, 352.8ms\n",
            "Speed: 4.5ms preprocess, 352.8ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 3 donuts, 362.3ms\n",
            "Speed: 5.8ms preprocess, 362.3ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 broccolis, 365.3ms\n",
            "Speed: 4.1ms preprocess, 365.3ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 365.1ms\n",
            "Speed: 4.3ms preprocess, 365.1ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 refrigerator, 354.9ms\n",
            "Speed: 8.9ms preprocess, 354.9ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 387.7ms\n",
            "Speed: 7.2ms preprocess, 387.7ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bottle, 2 bananas, 1 donut, 385.7ms\n",
            "Speed: 4.3ms preprocess, 385.7ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 orange, 1 donut, 395.2ms\n",
            "Speed: 4.3ms preprocess, 395.2ms inference, 2.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 359.9ms\n",
            "Speed: 4.6ms preprocess, 359.9ms inference, 1.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 hot dogs, 233.8ms\n",
            "Speed: 4.1ms preprocess, 233.8ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cake, 226.3ms\n",
            "Speed: 4.5ms preprocess, 226.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 carrot, 247.2ms\n",
            "Speed: 12.8ms preprocess, 247.2ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 broccoli, 243.0ms\n",
            "Speed: 4.4ms preprocess, 243.0ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 228.6ms\n",
            "Speed: 4.0ms preprocess, 228.6ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 230.2ms\n",
            "Speed: 4.1ms preprocess, 230.2ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 243.7ms\n",
            "Speed: 4.3ms preprocess, 243.7ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 245.0ms\n",
            "Speed: 4.5ms preprocess, 245.0ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 1 hot dog, 229.3ms\n",
            "Speed: 4.3ms preprocess, 229.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 hot dogs, 232.9ms\n",
            "Speed: 4.0ms preprocess, 232.9ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 hot dog, 246.1ms\n",
            "Speed: 4.1ms preprocess, 246.1ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 persons, 1 bowl, 2 donuts, 237.7ms\n",
            "Speed: 4.5ms preprocess, 237.7ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 258.5ms\n",
            "Speed: 4.0ms preprocess, 258.5ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 toothbrush, 228.1ms\n",
            "Speed: 4.1ms preprocess, 228.1ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 247.6ms\n",
            "Speed: 4.2ms preprocess, 247.6ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 sandwich, 244.5ms\n",
            "Speed: 4.9ms preprocess, 244.5ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cup, 1 dining table, 230.5ms\n",
            "Speed: 4.1ms preprocess, 230.5ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 225.8ms\n",
            "Speed: 4.3ms preprocess, 225.8ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 9 carrots, 249.2ms\n",
            "Speed: 4.8ms preprocess, 249.2ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 carrots, 236.8ms\n",
            "Speed: 6.1ms preprocess, 236.8ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 orange, 228.6ms\n",
            "Speed: 4.7ms preprocess, 228.6ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 banana, 227.9ms\n",
            "Speed: 4.2ms preprocess, 227.9ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 263.1ms\n",
            "Speed: 4.8ms preprocess, 263.1ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 car, 231.9ms\n",
            "Speed: 5.3ms preprocess, 231.9ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 1 donut, 233.4ms\n",
            "Speed: 4.5ms preprocess, 233.4ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 birds, 1 umbrella, 222.5ms\n",
            "Speed: 5.2ms preprocess, 222.5ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 bowls, 1 sandwich, 1 hot dog, 1 cell phone, 255.0ms\n",
            "Speed: 5.7ms preprocess, 255.0ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 231.5ms\n",
            "Speed: 4.0ms preprocess, 231.5ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 4 sandwichs, 233.3ms\n",
            "Speed: 4.2ms preprocess, 233.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 225.7ms\n",
            "Speed: 4.0ms preprocess, 225.7ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 250.0ms\n",
            "Speed: 5.4ms preprocess, 250.0ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 fire hydrant, 2 bananas, 3 donuts, 235.5ms\n",
            "Speed: 4.6ms preprocess, 235.5ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 vase, 232.8ms\n",
            "Speed: 4.2ms preprocess, 232.8ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 apple, 1 orange, 225.4ms\n",
            "Speed: 4.1ms preprocess, 225.4ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 254.9ms\n",
            "Speed: 4.0ms preprocess, 254.9ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 5 bananas, 12 donuts, 236.2ms\n",
            "Speed: 3.8ms preprocess, 236.2ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 26 bananas, 1 pizza, 226.3ms\n",
            "Speed: 4.7ms preprocess, 226.3ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 228.9ms\n",
            "Speed: 3.9ms preprocess, 228.9ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 245.3ms\n",
            "Speed: 4.4ms preprocess, 245.3ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 4 bananas, 1 dining table, 357.5ms\n",
            "Speed: 4.5ms preprocess, 357.5ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 banana, 360.4ms\n",
            "Speed: 4.1ms preprocess, 360.4ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 378.8ms\n",
            "Speed: 4.3ms preprocess, 378.8ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 347.1ms\n",
            "Speed: 4.1ms preprocess, 347.1ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 stop sign, 1 donut, 358.7ms\n",
            "Speed: 6.6ms preprocess, 358.7ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 372.0ms\n",
            "Speed: 5.2ms preprocess, 372.0ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 355.5ms\n",
            "Speed: 4.6ms preprocess, 355.5ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 toilet, 388.0ms\n",
            "Speed: 6.0ms preprocess, 388.0ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 donuts, 398.2ms\n",
            "Speed: 4.5ms preprocess, 398.2ms inference, 2.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 303.3ms\n",
            "Speed: 4.4ms preprocess, 303.3ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 11 bananas, 1 cake, 239.5ms\n",
            "Speed: 4.6ms preprocess, 239.5ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 cakes, 235.7ms\n",
            "Speed: 5.5ms preprocess, 235.7ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 4 donuts, 231.4ms\n",
            "Speed: 5.4ms preprocess, 231.4ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bird, 1 orange, 226.0ms\n",
            "Speed: 4.3ms preprocess, 226.0ms inference, 2.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 243.0ms\n",
            "Speed: 5.2ms preprocess, 243.0ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 244.8ms\n",
            "Speed: 5.0ms preprocess, 244.8ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 1 donut, 226.7ms\n",
            "Speed: 4.1ms preprocess, 226.7ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 230.9ms\n",
            "Speed: 4.0ms preprocess, 230.9ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 241.9ms\n",
            "Speed: 3.7ms preprocess, 241.9ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 4 carrots, 4 hot dogs, 232.8ms\n",
            "Speed: 7.0ms preprocess, 232.8ms inference, 2.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 233.8ms\n",
            "Speed: 4.9ms preprocess, 233.8ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bird, 1 broccoli, 228.3ms\n",
            "Speed: 4.1ms preprocess, 228.3ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 250.3ms\n",
            "Speed: 4.3ms preprocess, 250.3ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 244.5ms\n",
            "Speed: 4.2ms preprocess, 244.5ms inference, 0.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 246.4ms\n",
            "Speed: 4.9ms preprocess, 246.4ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 donut, 294.0ms\n",
            "Speed: 4.5ms preprocess, 294.0ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 frisbee, 232.5ms\n",
            "Speed: 5.1ms preprocess, 232.5ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 242.8ms\n",
            "Speed: 4.4ms preprocess, 242.8ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 225.1ms\n",
            "Speed: 6.9ms preprocess, 225.1ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 246.9ms\n",
            "Speed: 6.1ms preprocess, 246.9ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 broccolis, 240.6ms\n",
            "Speed: 4.2ms preprocess, 240.6ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 241.9ms\n",
            "Speed: 4.2ms preprocess, 241.9ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 pizza, 236.9ms\n",
            "Speed: 4.5ms preprocess, 236.9ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 donut, 247.5ms\n",
            "Speed: 4.1ms preprocess, 247.5ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 240.2ms\n",
            "Speed: 4.2ms preprocess, 240.2ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 banana, 1 broccoli, 246.1ms\n",
            "Speed: 4.5ms preprocess, 246.1ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 240.0ms\n",
            "Speed: 4.3ms preprocess, 240.0ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cell phone, 251.5ms\n",
            "Speed: 4.2ms preprocess, 251.5ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 226.8ms\n",
            "Speed: 7.2ms preprocess, 226.8ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 245.6ms\n",
            "Speed: 4.5ms preprocess, 245.6ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 229.1ms\n",
            "Speed: 4.0ms preprocess, 229.1ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 252.7ms\n",
            "Speed: 4.3ms preprocess, 252.7ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 240.3ms\n",
            "Speed: 4.3ms preprocess, 240.3ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 broccolis, 2 carrots, 240.6ms\n",
            "Speed: 5.2ms preprocess, 240.6ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 237.1ms\n",
            "Speed: 4.4ms preprocess, 237.1ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 258.2ms\n",
            "Speed: 4.3ms preprocess, 258.2ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 broccoli, 235.5ms\n",
            "Speed: 4.5ms preprocess, 235.5ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 240.8ms\n",
            "Speed: 4.2ms preprocess, 240.8ms inference, 1.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 apples, 1 orange, 1 donut, 343.9ms\n",
            "Speed: 4.3ms preprocess, 343.9ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 352.5ms\n",
            "Speed: 4.6ms preprocess, 352.5ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 banana, 27 donuts, 370.3ms\n",
            "Speed: 4.1ms preprocess, 370.3ms inference, 2.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 vase, 350.3ms\n",
            "Speed: 4.3ms preprocess, 350.3ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 broccolis, 6 carrots, 356.6ms\n",
            "Speed: 5.1ms preprocess, 356.6ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 365.5ms\n",
            "Speed: 4.1ms preprocess, 365.5ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 1 donut, 365.5ms\n",
            "Speed: 4.8ms preprocess, 365.5ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 412.5ms\n",
            "Speed: 6.6ms preprocess, 412.5ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bench, 1 bottle, 352.8ms\n",
            "Speed: 4.0ms preprocess, 352.8ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 tie, 1 vase, 230.0ms\n",
            "Speed: 5.8ms preprocess, 230.0ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 229.5ms\n",
            "Speed: 3.9ms preprocess, 229.5ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 237.0ms\n",
            "Speed: 4.1ms preprocess, 237.0ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 248.2ms\n",
            "Speed: 5.7ms preprocess, 248.2ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 toilet, 239.0ms\n",
            "Speed: 4.4ms preprocess, 239.0ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 fire hydrant, 226.3ms\n",
            "Speed: 4.1ms preprocess, 226.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 232.5ms\n",
            "Speed: 4.2ms preprocess, 232.5ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 251.8ms\n",
            "Speed: 4.0ms preprocess, 251.8ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 247.5ms\n",
            "Speed: 10.4ms preprocess, 247.5ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cat, 1 vase, 232.1ms\n",
            "Speed: 4.2ms preprocess, 232.1ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 232.9ms\n",
            "Speed: 4.1ms preprocess, 232.9ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 donut, 258.1ms\n",
            "Speed: 5.4ms preprocess, 258.1ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 236.5ms\n",
            "Speed: 5.6ms preprocess, 236.5ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 233.6ms\n",
            "Speed: 4.2ms preprocess, 233.6ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 236.3ms\n",
            "Speed: 4.1ms preprocess, 236.3ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 1 donut, 270.8ms\n",
            "Speed: 7.0ms preprocess, 270.8ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 234.4ms\n",
            "Speed: 5.4ms preprocess, 234.4ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 236.3ms\n",
            "Speed: 4.1ms preprocess, 236.3ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 person, 1 cat, 1 banana, 1 carrot, 1 hot dog, 246.5ms\n",
            "Speed: 8.4ms preprocess, 246.5ms inference, 2.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 257.5ms\n",
            "Speed: 4.4ms preprocess, 257.5ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 3 carrots, 235.3ms\n",
            "Speed: 4.9ms preprocess, 235.3ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cake, 228.7ms\n",
            "Speed: 5.1ms preprocess, 228.7ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 hot dog, 241.7ms\n",
            "Speed: 7.3ms preprocess, 241.7ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 246.9ms\n",
            "Speed: 4.4ms preprocess, 246.9ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 2 broccolis, 226.9ms\n",
            "Speed: 4.6ms preprocess, 226.9ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 1 donut, 234.8ms\n",
            "Speed: 4.5ms preprocess, 234.8ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 243.3ms\n",
            "Speed: 4.7ms preprocess, 243.3ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 247.0ms\n",
            "Speed: 4.8ms preprocess, 247.0ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 234.8ms\n",
            "Speed: 4.4ms preprocess, 234.8ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 horse, 1 vase, 230.0ms\n",
            "Speed: 4.9ms preprocess, 230.0ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 245.6ms\n",
            "Speed: 4.5ms preprocess, 245.6ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cup, 2 donuts, 249.0ms\n",
            "Speed: 4.5ms preprocess, 249.0ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 banana, 234.6ms\n",
            "Speed: 4.0ms preprocess, 234.6ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 234.1ms\n",
            "Speed: 4.2ms preprocess, 234.1ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 bottles, 1 wine glass, 3 cups, 1 bowl, 1 carrot, 1 dining table, 245.4ms\n",
            "Speed: 4.3ms preprocess, 245.4ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cake, 248.7ms\n",
            "Speed: 4.3ms preprocess, 248.7ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 carrot, 228.2ms\n",
            "Speed: 4.3ms preprocess, 228.2ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 238.2ms\n",
            "Speed: 4.1ms preprocess, 238.2ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 donut, 307.9ms\n",
            "Speed: 4.2ms preprocess, 307.9ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 366.6ms\n",
            "Speed: 4.1ms preprocess, 366.6ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 351.6ms\n",
            "Speed: 4.1ms preprocess, 351.6ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 376.3ms\n",
            "Speed: 4.1ms preprocess, 376.3ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 3 oranges, 351.8ms\n",
            "Speed: 4.8ms preprocess, 351.8ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 1 teddy bear, 361.1ms\n",
            "Speed: 4.2ms preprocess, 361.1ms inference, 2.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 376.3ms\n",
            "Speed: 5.1ms preprocess, 376.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 375.6ms\n",
            "Speed: 9.1ms preprocess, 375.6ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 386.3ms\n",
            "Speed: 4.0ms preprocess, 386.3ms inference, 2.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 392.8ms\n",
            "Speed: 4.2ms preprocess, 392.8ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 orange, 2 broccolis, 13 carrots, 277.6ms\n",
            "Speed: 5.4ms preprocess, 277.6ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 banana, 1 apple, 226.6ms\n",
            "Speed: 4.0ms preprocess, 226.6ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 240.9ms\n",
            "Speed: 4.9ms preprocess, 240.9ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 broccoli, 1 pizza, 1 dining table, 238.9ms\n",
            "Speed: 4.1ms preprocess, 238.9ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 245.7ms\n",
            "Speed: 4.2ms preprocess, 245.7ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 233.7ms\n",
            "Speed: 4.2ms preprocess, 233.7ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 241.6ms\n",
            "Speed: 4.0ms preprocess, 241.6ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 243.7ms\n",
            "Speed: 5.3ms preprocess, 243.7ms inference, 1.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 donut, 245.4ms\n",
            "Speed: 6.4ms preprocess, 245.4ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 person, 233.9ms\n",
            "Speed: 4.2ms preprocess, 233.9ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 326.0ms\n",
            "Speed: 6.2ms preprocess, 326.0ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 1 carrot, 233.3ms\n",
            "Speed: 4.2ms preprocess, 233.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 242.6ms\n",
            "Speed: 4.3ms preprocess, 242.6ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 233.8ms\n",
            "Speed: 6.5ms preprocess, 233.8ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 banana, 236.8ms\n",
            "Speed: 4.1ms preprocess, 236.8ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 apple, 16 donuts, 233.2ms\n",
            "Speed: 4.0ms preprocess, 233.2ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 vase, 236.7ms\n",
            "Speed: 4.9ms preprocess, 236.7ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 banana, 236.4ms\n",
            "Speed: 5.5ms preprocess, 236.4ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 bananas, 242.7ms\n",
            "Speed: 5.2ms preprocess, 242.7ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 235.2ms\n",
            "Speed: 4.1ms preprocess, 235.2ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 245.9ms\n",
            "Speed: 9.9ms preprocess, 245.9ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 231.1ms\n",
            "Speed: 4.0ms preprocess, 231.1ms inference, 1.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 1 book, 308.4ms\n",
            "Speed: 4.7ms preprocess, 308.4ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 249.9ms\n",
            "Speed: 4.4ms preprocess, 249.9ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 330.1ms\n",
            "Speed: 7.3ms preprocess, 330.1ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 265.1ms\n",
            "Speed: 5.0ms preprocess, 265.1ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 315.3ms\n",
            "Speed: 5.2ms preprocess, 315.3ms inference, 2.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 320.2ms\n",
            "Speed: 5.0ms preprocess, 320.2ms inference, 3.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 269.1ms\n",
            "Speed: 5.5ms preprocess, 269.1ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 person, 283.3ms\n",
            "Speed: 4.6ms preprocess, 283.3ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 342.6ms\n",
            "Speed: 5.2ms preprocess, 342.6ms inference, 4.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 239.2ms\n",
            "Speed: 5.9ms preprocess, 239.2ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 dining table, 241.3ms\n",
            "Speed: 5.0ms preprocess, 241.3ms inference, 1.6ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 broccolis, 244.7ms\n",
            "Speed: 4.3ms preprocess, 244.7ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cake, 229.3ms\n",
            "Speed: 4.1ms preprocess, 229.3ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 carrot, 235.2ms\n",
            "Speed: 4.2ms preprocess, 235.2ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bottle, 1 vase, 274.3ms\n",
            "Speed: 4.4ms preprocess, 274.3ms inference, 2.2ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 359.0ms\n",
            "Speed: 4.2ms preprocess, 359.0ms inference, 2.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 person, 1 carrot, 3 toothbrushs, 380.4ms\n",
            "Speed: 4.3ms preprocess, 380.4ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 carrots, 371.9ms\n",
            "Speed: 4.2ms preprocess, 371.9ms inference, 3.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 orange, 355.3ms\n",
            "Speed: 4.2ms preprocess, 355.3ms inference, 1.9ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 2 bananas, 364.3ms\n",
            "Speed: 4.3ms preprocess, 364.3ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 banana, 377.2ms\n",
            "Speed: 6.4ms preprocess, 377.2ms inference, 2.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 sandwich, 375.4ms\n",
            "Speed: 4.1ms preprocess, 375.4ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 401.6ms\n",
            "Speed: 6.6ms preprocess, 401.6ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 sandwichs, 381.8ms\n",
            "Speed: 6.0ms preprocess, 381.8ms inference, 2.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 toilet, 282.9ms\n",
            "Speed: 4.0ms preprocess, 282.9ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 237.4ms\n",
            "Speed: 4.1ms preprocess, 237.4ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 243.3ms\n",
            "Speed: 5.0ms preprocess, 243.3ms inference, 1.1ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 cake, 237.0ms\n",
            "Speed: 5.0ms preprocess, 237.0ms inference, 1.7ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 banana, 1 broccoli, 225.4ms\n",
            "Speed: 5.5ms preprocess, 225.4ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 banana, 1 orange, 248.5ms\n",
            "Speed: 4.4ms preprocess, 248.5ms inference, 1.8ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 donut, 241.2ms\n",
            "Speed: 3.9ms preprocess, 241.2ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 (no detections), 234.0ms\n",
            "Speed: 4.8ms preprocess, 234.0ms inference, 1.0ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 bowl, 5 donuts, 229.3ms\n",
            "Speed: 5.3ms preprocess, 229.3ms inference, 1.5ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 1 tie, 236.5ms\n",
            "Speed: 5.0ms preprocess, 236.5ms inference, 1.3ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 sandwichs, 1 broccoli, 243.2ms\n",
            "Speed: 5.0ms preprocess, 243.2ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n",
            "\n",
            "0: 640x640 2 donuts, 227.5ms\n",
            "Speed: 4.6ms preprocess, 227.5ms inference, 1.4ms postprocess per image at shape (1, 3, 640, 640)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Augmentation Model**"
      ],
      "metadata": {
        "id": "_TtCC5da-Kuw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "augmentation_model = tf.keras.Sequential([\n",
        "    tf.keras.layers.Rescaling(1./255),\n",
        "    tf.keras.layers.RandomFlip(\"horizontal_and_vertical\"),\n",
        "    tf.keras.layers.RandomRotation(0.3),\n",
        "    tf.keras.layers.RandomZoom(0.3),\n",
        "    tf.keras.layers.RandomTranslation(0.3, 0.3),\n",
        "])\n",
        "\n",
        "augmented_train_dataset = training_dataset.map(\n",
        "    lambda x, y: (augmentation_model(x, training=True), y)\n",
        ")"
      ],
      "metadata": {
        "id": "hzccJo8uz5K6"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **CNN Model**"
      ],
      "metadata": {
        "id": "nX5aIyjLAAJR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = tf.keras.models.Sequential([\n",
        "\t\ttf.keras.Input(shape=(150,150,3)),\n",
        "        augmentation_model,\n",
        "        tf.keras.layers.Rescaling(1./255),\n",
        "\n",
        "        tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n",
        "        tf.keras.layers.BatchNormalization(),\n",
        "        tf.keras.layers.MaxPooling2D(2, 2),\n",
        "\n",
        "        # tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n",
        "        # tf.keras.layers.BatchNormalization(),\n",
        "        # tf.keras.layers.MaxPooling2D(2,2),\n",
        "\n",
        "        # tf.keras.layers.Conv2D(256, (3,3), activation='relu'),\n",
        "        # tf.keras.layers.BatchNormalization(),\n",
        "        # tf.keras.layers.MaxPooling2D(2,2),\n",
        "\n",
        "        # tf.keras.layers.Conv2D(512, (3, 3), activation='relu'),\n",
        "        # tf.keras.layers.BatchNormalization(),\n",
        "        # tf.keras.layers.MaxPooling2D(2, 2),\n",
        "\n",
        "        tf.keras.layers.GlobalAveragePooling2D(),\n",
        "        tf.keras.layers.Dense(512, activation='relu'),\n",
        "        tf.keras.layers.Dropout(0.5),\n",
        "        tf.keras.layers.Dense(len(training_dataset.class_names), activation='softmax'),\n",
        "    ])\n",
        "\n",
        "model.compile(\n",
        "        optimizer=tf.keras.optimizers.Adam(),\n",
        "        loss=\"sparse_categorical_crossentropy\",\n",
        "        metrics=['accuracy']\n",
        "    )\n",
        "\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 523
        },
        "id": "7WtO979-_ahg",
        "outputId": "50e41a0f-4cb2-47a0-93a3-dd8f54021997"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"sequential_22\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_22\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ sequential_21 (\u001b[38;5;33mSequential\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m150\u001b[0m, \u001b[38;5;34m150\u001b[0m, \u001b[38;5;34m3\u001b[0m)         │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ rescaling_22 (\u001b[38;5;33mRescaling\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m150\u001b[0m, \u001b[38;5;34m150\u001b[0m, \u001b[38;5;34m3\u001b[0m)         │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_73 (\u001b[38;5;33mConv2D\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m148\u001b[0m, \u001b[38;5;34m148\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │           \u001b[38;5;34m1,792\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_73               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m148\u001b[0m, \u001b[38;5;34m148\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │             \u001b[38;5;34m256\u001b[0m │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d_73 (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m74\u001b[0m, \u001b[38;5;34m74\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ global_average_pooling2d_19          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n",
              "│ (\u001b[38;5;33mGlobalAveragePooling2D\u001b[0m)             │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_38 (\u001b[38;5;33mDense\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)                 │          \u001b[38;5;34m33,280\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_19 (\u001b[38;5;33mDropout\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_39 (\u001b[38;5;33mDense\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)                   │           \u001b[38;5;34m4,104\u001b[0m │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ sequential_21 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Sequential</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">150</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">150</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)         │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ rescaling_22 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Rescaling</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">150</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">150</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)         │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_73 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">148</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">148</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │           <span style=\"color: #00af00; text-decoration-color: #00af00\">1,792</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_73               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">148</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">148</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d_73 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">74</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">74</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ global_average_pooling2d_19          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling2D</span>)             │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_38 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)                 │          <span style=\"color: #00af00; text-decoration-color: #00af00\">33,280</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_19 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_39 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)                   │           <span style=\"color: #00af00; text-decoration-color: #00af00\">4,104</span> │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m39,432\u001b[0m (154.03 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">39,432</span> (154.03 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m39,304\u001b[0m (153.53 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">39,304</span> (153.53 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m128\u001b[0m (512.00 B)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> (512.00 B)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, Rescaling, BatchNormalization, GlobalAveragePooling2D\n",
        "\n",
        "model = Sequential([\n",
        "    Rescaling(1./255, input_shape=(150, 150, 3)),\n",
        "\n",
        "    Conv2D(32, (3, 3), activation='relu'),\n",
        "    BatchNormalization(),  # Tambahkan Batch Normalization\n",
        "    MaxPooling2D((2, 2)),\n",
        "\n",
        "    Conv2D(64, (3, 3), activation='relu'),\n",
        "    BatchNormalization(),\n",
        "    MaxPooling2D((2, 2)),\n",
        "\n",
        "    Conv2D(128, (3, 3), activation='relu'),\n",
        "    BatchNormalization(),\n",
        "    MaxPooling2D((2, 2)),\n",
        "\n",
        "    Conv2D(128, (3, 3), activation='relu'),\n",
        "    BatchNormalization(),\n",
        "    MaxPooling2D((2, 2)),\n",
        "\n",
        "    GlobalAveragePooling2D(),  # Gantikan Flatten dengan Global Average Pooling\n",
        "    Dense(128, activation='relu'),\n",
        "    Dropout(0.5),\n",
        "    Dense(len(training_dataset.class_names), activation='softmax')\n",
        "    ])\n",
        "\n",
        "model.compile(\n",
        "        optimizer=tf.keras.optimizers.Adam(),\n",
        "        loss=\"sparse_categorical_crossentropy\",\n",
        "        metrics=['accuracy']\n",
        "    )"
      ],
      "metadata": {
        "id": "BYRVjJ1Eg3s0"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(\n",
        "\ttraining_dataset,\n",
        "\tepochs=100,\n",
        "\tvalidation_data=validation_dataset,\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "grvCJuZwBgGN",
        "outputId": "b7869454-ee00-4aa5-aac4-a4998ba13eaa"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 749ms/step - accuracy: 0.3079 - loss: 2.0436 - val_accuracy: 0.2101 - val_loss: 2.1107\n",
            "Epoch 2/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 761ms/step - accuracy: 0.3983 - loss: 1.5921 - val_accuracy: 0.1812 - val_loss: 2.4832\n",
            "Epoch 3/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 767ms/step - accuracy: 0.4946 - loss: 1.3183 - val_accuracy: 0.2101 - val_loss: 2.6029\n",
            "Epoch 4/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 759ms/step - accuracy: 0.4666 - loss: 1.4595 - val_accuracy: 0.2536 - val_loss: 2.7037\n",
            "Epoch 5/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 749ms/step - accuracy: 0.4767 - loss: 1.4125 - val_accuracy: 0.3261 - val_loss: 1.9325\n",
            "Epoch 6/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 742ms/step - accuracy: 0.5184 - loss: 1.2958 - val_accuracy: 0.2899 - val_loss: 1.9087\n",
            "Epoch 7/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 739ms/step - accuracy: 0.5206 - loss: 1.3386 - val_accuracy: 0.3913 - val_loss: 1.5384\n",
            "Epoch 8/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 737ms/step - accuracy: 0.6044 - loss: 1.1946 - val_accuracy: 0.2464 - val_loss: 2.3245\n",
            "Epoch 9/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 736ms/step - accuracy: 0.5655 - loss: 1.2044 - val_accuracy: 0.5580 - val_loss: 1.1529\n",
            "Epoch 10/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 732ms/step - accuracy: 0.5676 - loss: 1.1332 - val_accuracy: 0.3841 - val_loss: 1.6270\n",
            "Epoch 11/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 707ms/step - accuracy: 0.6162 - loss: 1.0610 - val_accuracy: 0.4493 - val_loss: 1.3335\n",
            "Epoch 12/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 724ms/step - accuracy: 0.5697 - loss: 1.1882 - val_accuracy: 0.4348 - val_loss: 1.9899\n",
            "Epoch 13/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 756ms/step - accuracy: 0.5622 - loss: 1.2506 - val_accuracy: 0.4058 - val_loss: 1.6771\n",
            "Epoch 14/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 723ms/step - accuracy: 0.5732 - loss: 1.1280 - val_accuracy: 0.4058 - val_loss: 1.6962\n",
            "Epoch 15/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 720ms/step - accuracy: 0.6020 - loss: 1.0281 - val_accuracy: 0.5942 - val_loss: 1.1727\n",
            "Epoch 16/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 717ms/step - accuracy: 0.5619 - loss: 1.1134 - val_accuracy: 0.4275 - val_loss: 1.4952\n",
            "Epoch 17/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 715ms/step - accuracy: 0.5861 - loss: 1.0246 - val_accuracy: 0.2101 - val_loss: 6.3918\n",
            "Epoch 18/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 721ms/step - accuracy: 0.5794 - loss: 1.1311 - val_accuracy: 0.3333 - val_loss: 4.7382\n",
            "Epoch 19/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 718ms/step - accuracy: 0.6651 - loss: 0.9689 - val_accuracy: 0.3261 - val_loss: 2.6751\n",
            "Epoch 20/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 744ms/step - accuracy: 0.6811 - loss: 0.9457 - val_accuracy: 0.6014 - val_loss: 1.1723\n",
            "Epoch 21/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 722ms/step - accuracy: 0.6211 - loss: 1.0714 - val_accuracy: 0.4565 - val_loss: 1.3819\n",
            "Epoch 22/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 724ms/step - accuracy: 0.6263 - loss: 0.9298 - val_accuracy: 0.5797 - val_loss: 1.1547\n",
            "Epoch 23/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 718ms/step - accuracy: 0.6730 - loss: 0.8959 - val_accuracy: 0.6812 - val_loss: 0.9733\n",
            "Epoch 24/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 715ms/step - accuracy: 0.7343 - loss: 0.8304 - val_accuracy: 0.4493 - val_loss: 1.6272\n",
            "Epoch 25/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 710ms/step - accuracy: 0.6821 - loss: 0.8452 - val_accuracy: 0.5435 - val_loss: 1.2867\n",
            "Epoch 26/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 715ms/step - accuracy: 0.6827 - loss: 0.8488 - val_accuracy: 0.6232 - val_loss: 1.0648\n",
            "Epoch 27/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 719ms/step - accuracy: 0.6688 - loss: 0.9008 - val_accuracy: 0.5652 - val_loss: 1.6049\n",
            "Epoch 28/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 719ms/step - accuracy: 0.6989 - loss: 0.8735 - val_accuracy: 0.4928 - val_loss: 1.8549\n",
            "Epoch 29/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 725ms/step - accuracy: 0.6527 - loss: 0.8291 - val_accuracy: 0.6377 - val_loss: 1.0839\n",
            "Epoch 30/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 739ms/step - accuracy: 0.6663 - loss: 0.8341 - val_accuracy: 0.5870 - val_loss: 1.2338\n",
            "Epoch 31/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 719ms/step - accuracy: 0.7075 - loss: 0.8264 - val_accuracy: 0.4710 - val_loss: 1.7778\n",
            "Epoch 32/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 714ms/step - accuracy: 0.7729 - loss: 0.7116 - val_accuracy: 0.6594 - val_loss: 0.8888\n",
            "Epoch 33/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 714ms/step - accuracy: 0.7291 - loss: 0.7772 - val_accuracy: 0.5217 - val_loss: 1.2199\n",
            "Epoch 34/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 718ms/step - accuracy: 0.7150 - loss: 0.8210 - val_accuracy: 0.6087 - val_loss: 1.1391\n",
            "Epoch 35/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 717ms/step - accuracy: 0.7520 - loss: 0.6728 - val_accuracy: 0.4130 - val_loss: 2.1153\n",
            "Epoch 36/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 719ms/step - accuracy: 0.7361 - loss: 0.7712 - val_accuracy: 0.6159 - val_loss: 1.1433\n",
            "Epoch 37/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 707ms/step - accuracy: 0.7641 - loss: 0.6799 - val_accuracy: 0.5145 - val_loss: 1.6009\n",
            "Epoch 38/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 687ms/step - accuracy: 0.8059 - loss: 0.5647 - val_accuracy: 0.5507 - val_loss: 1.6213\n",
            "Epoch 39/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m44s\u001b[0m 746ms/step - accuracy: 0.7739 - loss: 0.6823 - val_accuracy: 0.6232 - val_loss: 1.2309\n",
            "Epoch 40/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 719ms/step - accuracy: 0.7711 - loss: 0.7155 - val_accuracy: 0.6087 - val_loss: 1.2512\n",
            "Epoch 41/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 719ms/step - accuracy: 0.7855 - loss: 0.5719 - val_accuracy: 0.5725 - val_loss: 1.3757\n",
            "Epoch 42/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 727ms/step - accuracy: 0.7935 - loss: 0.5584 - val_accuracy: 0.5652 - val_loss: 1.3476\n",
            "Epoch 43/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 729ms/step - accuracy: 0.7828 - loss: 0.5293 - val_accuracy: 0.5362 - val_loss: 1.2766\n",
            "Epoch 44/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 728ms/step - accuracy: 0.8451 - loss: 0.4583 - val_accuracy: 0.5072 - val_loss: 1.7581\n",
            "Epoch 45/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 720ms/step - accuracy: 0.7909 - loss: 0.6233 - val_accuracy: 0.6449 - val_loss: 0.9863\n",
            "Epoch 46/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 731ms/step - accuracy: 0.8680 - loss: 0.4560 - val_accuracy: 0.5000 - val_loss: 1.7156\n",
            "Epoch 47/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 723ms/step - accuracy: 0.7894 - loss: 0.5984 - val_accuracy: 0.5652 - val_loss: 1.4910\n",
            "Epoch 48/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 720ms/step - accuracy: 0.8096 - loss: 0.4874 - val_accuracy: 0.5797 - val_loss: 1.4605\n",
            "Epoch 49/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 696ms/step - accuracy: 0.8566 - loss: 0.4045 - val_accuracy: 0.6014 - val_loss: 1.2355\n",
            "Epoch 50/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 709ms/step - accuracy: 0.8536 - loss: 0.4487 - val_accuracy: 0.4203 - val_loss: 2.1989\n",
            "Epoch 51/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 719ms/step - accuracy: 0.8287 - loss: 0.4789 - val_accuracy: 0.6739 - val_loss: 1.0307\n",
            "Epoch 52/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 747ms/step - accuracy: 0.9019 - loss: 0.3242 - val_accuracy: 0.6159 - val_loss: 1.0883\n",
            "Epoch 53/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 727ms/step - accuracy: 0.8740 - loss: 0.3867 - val_accuracy: 0.5290 - val_loss: 1.8726\n",
            "Epoch 54/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 756ms/step - accuracy: 0.8713 - loss: 0.3740 - val_accuracy: 0.6304 - val_loss: 1.3591\n",
            "Epoch 55/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 728ms/step - accuracy: 0.8750 - loss: 0.3711 - val_accuracy: 0.6232 - val_loss: 1.4196\n",
            "Epoch 56/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 766ms/step - accuracy: 0.8645 - loss: 0.4134 - val_accuracy: 0.7174 - val_loss: 1.1120\n",
            "Epoch 57/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 721ms/step - accuracy: 0.8408 - loss: 0.4157 - val_accuracy: 0.4855 - val_loss: 1.5581\n",
            "Epoch 58/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 730ms/step - accuracy: 0.7867 - loss: 0.5275 - val_accuracy: 0.6159 - val_loss: 1.4064\n",
            "Epoch 59/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 727ms/step - accuracy: 0.8553 - loss: 0.3920 - val_accuracy: 0.6087 - val_loss: 1.4410\n",
            "Epoch 60/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 720ms/step - accuracy: 0.8985 - loss: 0.2728 - val_accuracy: 0.5942 - val_loss: 1.6723\n",
            "Epoch 61/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 725ms/step - accuracy: 0.8830 - loss: 0.2984 - val_accuracy: 0.5145 - val_loss: 1.8563\n",
            "Epoch 62/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 726ms/step - accuracy: 0.9303 - loss: 0.2323 - val_accuracy: 0.6232 - val_loss: 1.3908\n",
            "Epoch 63/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 731ms/step - accuracy: 0.9318 - loss: 0.1815 - val_accuracy: 0.6159 - val_loss: 1.4013\n",
            "Epoch 64/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 717ms/step - accuracy: 0.9427 - loss: 0.1991 - val_accuracy: 0.6957 - val_loss: 1.2164\n",
            "Epoch 65/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 750ms/step - accuracy: 0.9385 - loss: 0.1745 - val_accuracy: 0.5580 - val_loss: 1.8809\n",
            "Epoch 66/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 724ms/step - accuracy: 0.9053 - loss: 0.3010 - val_accuracy: 0.5507 - val_loss: 1.7591\n",
            "Epoch 67/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 724ms/step - accuracy: 0.9472 - loss: 0.1520 - val_accuracy: 0.5725 - val_loss: 2.0184\n",
            "Epoch 68/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 723ms/step - accuracy: 0.9135 - loss: 0.2805 - val_accuracy: 0.5072 - val_loss: 2.1404\n",
            "Epoch 69/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 722ms/step - accuracy: 0.8947 - loss: 0.3257 - val_accuracy: 0.6159 - val_loss: 1.6398\n",
            "Epoch 70/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 728ms/step - accuracy: 0.8686 - loss: 0.2813 - val_accuracy: 0.6449 - val_loss: 1.4773\n",
            "Epoch 71/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 727ms/step - accuracy: 0.9326 - loss: 0.1809 - val_accuracy: 0.4420 - val_loss: 3.3095\n",
            "Epoch 72/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 757ms/step - accuracy: 0.9383 - loss: 0.2349 - val_accuracy: 0.6377 - val_loss: 1.7026\n",
            "Epoch 73/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 730ms/step - accuracy: 0.9417 - loss: 0.1460 - val_accuracy: 0.7319 - val_loss: 0.8807\n",
            "Epoch 74/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 730ms/step - accuracy: 0.9272 - loss: 0.1928 - val_accuracy: 0.5362 - val_loss: 3.4627\n",
            "Epoch 75/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 729ms/step - accuracy: 0.9627 - loss: 0.1246 - val_accuracy: 0.6812 - val_loss: 1.2318\n",
            "Epoch 76/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 725ms/step - accuracy: 0.9360 - loss: 0.1893 - val_accuracy: 0.5507 - val_loss: 1.7780\n",
            "Epoch 77/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 729ms/step - accuracy: 0.9327 - loss: 0.2061 - val_accuracy: 0.6449 - val_loss: 1.2838\n",
            "Epoch 78/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 714ms/step - accuracy: 0.9183 - loss: 0.2376 - val_accuracy: 0.6232 - val_loss: 1.5719\n",
            "Epoch 79/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 752ms/step - accuracy: 0.9579 - loss: 0.1514 - val_accuracy: 0.5797 - val_loss: 2.0434\n",
            "Epoch 80/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 723ms/step - accuracy: 0.9651 - loss: 0.1125 - val_accuracy: 0.6522 - val_loss: 1.3465\n",
            "Epoch 81/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 739ms/step - accuracy: 0.9736 - loss: 0.0921 - val_accuracy: 0.6232 - val_loss: 1.5300\n",
            "Epoch 82/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 729ms/step - accuracy: 0.9686 - loss: 0.0977 - val_accuracy: 0.6304 - val_loss: 1.5119\n",
            "Epoch 83/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 732ms/step - accuracy: 0.9836 - loss: 0.0741 - val_accuracy: 0.7029 - val_loss: 1.3603\n",
            "Epoch 84/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 724ms/step - accuracy: 0.9565 - loss: 0.1907 - val_accuracy: 0.6739 - val_loss: 1.4119\n",
            "Epoch 85/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 724ms/step - accuracy: 0.9665 - loss: 0.1022 - val_accuracy: 0.5870 - val_loss: 1.9487\n",
            "Epoch 86/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 729ms/step - accuracy: 0.9336 - loss: 0.1792 - val_accuracy: 0.5797 - val_loss: 2.5572\n",
            "Epoch 87/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 730ms/step - accuracy: 0.9719 - loss: 0.0878 - val_accuracy: 0.6449 - val_loss: 1.6201\n",
            "Epoch 88/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 724ms/step - accuracy: 0.9766 - loss: 0.0797 - val_accuracy: 0.7536 - val_loss: 1.1661\n",
            "Epoch 89/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 760ms/step - accuracy: 0.9731 - loss: 0.0983 - val_accuracy: 0.6159 - val_loss: 1.8316\n",
            "Epoch 90/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 730ms/step - accuracy: 0.9455 - loss: 0.1610 - val_accuracy: 0.4710 - val_loss: 3.0077\n",
            "Epoch 91/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 724ms/step - accuracy: 0.9448 - loss: 0.1639 - val_accuracy: 0.6159 - val_loss: 1.8934\n",
            "Epoch 92/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 723ms/step - accuracy: 0.9545 - loss: 0.1297 - val_accuracy: 0.6812 - val_loss: 1.5675\n",
            "Epoch 93/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 727ms/step - accuracy: 0.9164 - loss: 0.2334 - val_accuracy: 0.6014 - val_loss: 2.0274\n",
            "Epoch 94/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 727ms/step - accuracy: 0.9644 - loss: 0.1422 - val_accuracy: 0.6884 - val_loss: 1.6052\n",
            "Epoch 95/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 746ms/step - accuracy: 0.9914 - loss: 0.0545 - val_accuracy: 0.6377 - val_loss: 1.5114\n",
            "Epoch 96/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 725ms/step - accuracy: 0.9794 - loss: 0.0623 - val_accuracy: 0.6014 - val_loss: 1.9578\n",
            "Epoch 97/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 731ms/step - accuracy: 0.9721 - loss: 0.0882 - val_accuracy: 0.6957 - val_loss: 1.5590\n",
            "Epoch 98/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 719ms/step - accuracy: 0.9700 - loss: 0.1040 - val_accuracy: 0.6522 - val_loss: 1.6538\n",
            "Epoch 99/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 725ms/step - accuracy: 0.9618 - loss: 0.1175 - val_accuracy: 0.7319 - val_loss: 1.0253\n",
            "Epoch 100/100\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 721ms/step - accuracy: 0.9691 - loss: 0.0975 - val_accuracy: 0.6087 - val_loss: 1.8284\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get training and validation accuracies\n",
        "acc = history.history['accuracy']\n",
        "val_acc = history.history['val_accuracy']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "# Get number of epochs\n",
        "epochs = range(len(acc))\n",
        "\n",
        "fig, ax = plt.subplots(1, 2, figsize=(10, 5))\n",
        "fig.suptitle('Training and validation accuracy')\n",
        "\n",
        "for i, (data, label) in enumerate(zip([(acc, val_acc), (loss, val_loss)], [\"Accuracy\", \"Loss\"])):\n",
        "    ax[i].plot(epochs, data[0], 'r', label=\"Training \" + label)\n",
        "    ax[i].plot(epochs, data[1], 'b', label=\"Validation \" + label)\n",
        "    ax[i].legend()\n",
        "    ax[i].set_xlabel('epochs')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 515
        },
        "id": "p58EQ6l9DxLb",
        "outputId": "5ad21cd9-4622-4c80-ce18-e86c729dc4cc"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}